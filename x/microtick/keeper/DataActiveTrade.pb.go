// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/keeper/DataActiveTrade.proto

package keeper

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DataQuotedParams struct {
	Id            uint32        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Final         bool          `protobuf:"varint,2,opt,name=final,proto3" json:"final"`
	Premium       types.DecCoin `protobuf:"bytes,3,opt,name=premium,proto3" json:"premium"`
	RemainBacking types.DecCoin `protobuf:"bytes,4,opt,name=remain_backing,json=remainBacking,proto3" json:"remain_backing"`
	Spot          types.DecCoin `protobuf:"bytes,5,opt,name=spot,proto3" json:"spot"`
}

func (m *DataQuotedParams) Reset()         { *m = DataQuotedParams{} }
func (m *DataQuotedParams) String() string { return proto.CompactTextString(m) }
func (*DataQuotedParams) ProtoMessage()    {}
func (*DataQuotedParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_5048814a0ff86eb2, []int{0}
}
func (m *DataQuotedParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataQuotedParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataQuotedParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataQuotedParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataQuotedParams.Merge(m, src)
}
func (m *DataQuotedParams) XXX_Size() int {
	return m.Size()
}
func (m *DataQuotedParams) XXX_DiscardUnknown() {
	xxx_messageInfo_DataQuotedParams.DiscardUnknown(m)
}

var xxx_messageInfo_DataQuotedParams proto.InternalMessageInfo

func (m *DataQuotedParams) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DataQuotedParams) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *DataQuotedParams) GetPremium() types.DecCoin {
	if m != nil {
		return m.Premium
	}
	return types.DecCoin{}
}

func (m *DataQuotedParams) GetRemainBacking() types.DecCoin {
	if m != nil {
		return m.RemainBacking
	}
	return types.DecCoin{}
}

func (m *DataQuotedParams) GetSpot() types.DecCoin {
	if m != nil {
		return m.Spot
	}
	return types.DecCoin{}
}

type DataTradeLeg struct {
	LegId    uint32                                        `protobuf:"varint,1,opt,name=leg_id,json=legId,proto3" json:"leg_id"`
	Type     bool                                          `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
	Backing  types.DecCoin                                 `protobuf:"bytes,3,opt,name=backing,proto3" json:"backing"`
	Premium  types.DecCoin                                 `protobuf:"bytes,4,opt,name=premium,proto3" json:"premium"`
	Cost     types.DecCoin                                 `protobuf:"bytes,5,opt,name=cost,proto3" json:"cost"`
	Quantity types.DecCoin                                 `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity"`
	Long     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=long,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"long"`
	Short    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,8,opt,name=short,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"short"`
	Quoted   DataQuotedParams                              `protobuf:"bytes,9,opt,name=quoted,proto3" json:"quoted"`
}

func (m *DataTradeLeg) Reset()         { *m = DataTradeLeg{} }
func (m *DataTradeLeg) String() string { return proto.CompactTextString(m) }
func (*DataTradeLeg) ProtoMessage()    {}
func (*DataTradeLeg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5048814a0ff86eb2, []int{1}
}
func (m *DataTradeLeg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataTradeLeg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataTradeLeg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataTradeLeg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataTradeLeg.Merge(m, src)
}
func (m *DataTradeLeg) XXX_Size() int {
	return m.Size()
}
func (m *DataTradeLeg) XXX_DiscardUnknown() {
	xxx_messageInfo_DataTradeLeg.DiscardUnknown(m)
}

var xxx_messageInfo_DataTradeLeg proto.InternalMessageInfo

func (m *DataTradeLeg) GetLegId() uint32 {
	if m != nil {
		return m.LegId
	}
	return 0
}

func (m *DataTradeLeg) GetType() bool {
	if m != nil {
		return m.Type
	}
	return false
}

func (m *DataTradeLeg) GetBacking() types.DecCoin {
	if m != nil {
		return m.Backing
	}
	return types.DecCoin{}
}

func (m *DataTradeLeg) GetPremium() types.DecCoin {
	if m != nil {
		return m.Premium
	}
	return types.DecCoin{}
}

func (m *DataTradeLeg) GetCost() types.DecCoin {
	if m != nil {
		return m.Cost
	}
	return types.DecCoin{}
}

func (m *DataTradeLeg) GetQuantity() types.DecCoin {
	if m != nil {
		return m.Quantity
	}
	return types.DecCoin{}
}

func (m *DataTradeLeg) GetLong() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Long
	}
	return nil
}

func (m *DataTradeLeg) GetShort() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Short
	}
	return nil
}

func (m *DataTradeLeg) GetQuoted() DataQuotedParams {
	if m != nil {
		return m.Quoted
	}
	return DataQuotedParams{}
}

type DataActiveTrade struct {
	Id              uint32                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Market          string                                        `protobuf:"bytes,2,opt,name=market,proto3" json:"market"`
	Duration        string                                        `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration"`
	Order           string                                        `protobuf:"bytes,4,opt,name=order,proto3" json:"order"`
	Taker           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=taker,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"taker"`
	Quantity        types.DecCoin                                 `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity"`
	Legs            []DataTradeLeg                                `protobuf:"bytes,7,rep,name=legs,proto3" json:"legs"`
	Start           int64                                         `protobuf:"varint,8,opt,name=start,proto3" json:"start"`
	Expiration      int64                                         `protobuf:"varint,9,opt,name=expiration,proto3" json:"expiration"`
	Strike          types.DecCoin                                 `protobuf:"bytes,10,opt,name=strike,proto3" json:"strike"`
	Commission      types.DecCoin                                 `protobuf:"bytes,11,opt,name=commission,proto3" json:"commission"`
	SettleIncentive types.DecCoin                                 `protobuf:"bytes,12,opt,name=settle_incentive,json=settleIncentive,proto3" json:"settleIncentive"`
}

func (m *DataActiveTrade) Reset()         { *m = DataActiveTrade{} }
func (m *DataActiveTrade) String() string { return proto.CompactTextString(m) }
func (*DataActiveTrade) ProtoMessage()    {}
func (*DataActiveTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_5048814a0ff86eb2, []int{2}
}
func (m *DataActiveTrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataActiveTrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataActiveTrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataActiveTrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataActiveTrade.Merge(m, src)
}
func (m *DataActiveTrade) XXX_Size() int {
	return m.Size()
}
func (m *DataActiveTrade) XXX_DiscardUnknown() {
	xxx_messageInfo_DataActiveTrade.DiscardUnknown(m)
}

var xxx_messageInfo_DataActiveTrade proto.InternalMessageInfo

func (m *DataActiveTrade) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DataActiveTrade) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *DataActiveTrade) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *DataActiveTrade) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *DataActiveTrade) GetTaker() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Taker
	}
	return nil
}

func (m *DataActiveTrade) GetQuantity() types.DecCoin {
	if m != nil {
		return m.Quantity
	}
	return types.DecCoin{}
}

func (m *DataActiveTrade) GetLegs() []DataTradeLeg {
	if m != nil {
		return m.Legs
	}
	return nil
}

func (m *DataActiveTrade) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *DataActiveTrade) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *DataActiveTrade) GetStrike() types.DecCoin {
	if m != nil {
		return m.Strike
	}
	return types.DecCoin{}
}

func (m *DataActiveTrade) GetCommission() types.DecCoin {
	if m != nil {
		return m.Commission
	}
	return types.DecCoin{}
}

func (m *DataActiveTrade) GetSettleIncentive() types.DecCoin {
	if m != nil {
		return m.SettleIncentive
	}
	return types.DecCoin{}
}

func init() {
	proto.RegisterType((*DataQuotedParams)(nil), "microtick.keeper.DataQuotedParams")
	proto.RegisterType((*DataTradeLeg)(nil), "microtick.keeper.DataTradeLeg")
	proto.RegisterType((*DataActiveTrade)(nil), "microtick.keeper.DataActiveTrade")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/keeper/DataActiveTrade.proto", fileDescriptor_5048814a0ff86eb2)
}

var fileDescriptor_5048814a0ff86eb2 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x83, 0x13, 0x92, 0x21, 0x40, 0x34, 0xba, 0xe2, 0x5a, 0x08, 0xd9, 0xb9, 0x59, 0x65,
	0x83, 0x2d, 0xb8, 0xab, 0x7b, 0x17, 0xe8, 0xe2, 0x8b, 0xd4, 0x82, 0x5a, 0x89, 0x8e, 0xba, 0x6a,
	0x17, 0x74, 0x62, 0x4f, 0xcd, 0x28, 0xb1, 0x27, 0xcc, 0x4c, 0x10, 0xf4, 0x29, 0xfa, 0x2a, 0x7d,
	0x86, 0x6e, 0x58, 0xb2, 0xac, 0xba, 0x88, 0x2a, 0xd8, 0xe5, 0x11, 0xba, 0xaa, 0xe6, 0xc7, 0x21,
	0x8a, 0x5a, 0x29, 0xb4, 0xdd, 0xcc, 0x39, 0x73, 0x3c, 0xdf, 0x77, 0x34, 0xdf, 0x7c, 0x47, 0x06,
	0x61, 0x4e, 0x13, 0xce, 0x24, 0x4d, 0x06, 0xd1, 0xe5, 0x5e, 0x9f, 0x48, 0xbc, 0x17, 0x0d, 0x08,
	0x19, 0x11, 0x1e, 0x1d, 0x61, 0x89, 0x0f, 0x13, 0x49, 0x2f, 0xc9, 0x4b, 0x8e, 0x53, 0x12, 0x8e,
	0x38, 0x93, 0x0c, 0xb6, 0x67, 0xe7, 0x43, 0x73, 0x6e, 0xfb, 0x8f, 0x8c, 0x65, 0x4c, 0x7f, 0x8c,
	0x54, 0x66, 0xce, 0x6d, 0xfb, 0x09, 0x13, 0x39, 0x13, 0x51, 0x1f, 0x0b, 0x32, 0x63, 0x4e, 0x18,
	0x2d, 0xcc, 0xf7, 0xee, 0x87, 0x2a, 0x68, 0xab, 0x0e, 0x2f, 0xc6, 0x4c, 0x92, 0xf4, 0x14, 0x73,
	0x9c, 0x0b, 0xb8, 0x05, 0xaa, 0x34, 0xf5, 0x9c, 0x8e, 0xd3, 0x5b, 0x8f, 0xeb, 0xd3, 0x49, 0x50,
	0xa5, 0x29, 0xaa, 0xd2, 0x14, 0x06, 0xa0, 0xf6, 0x96, 0x16, 0x78, 0xe8, 0x55, 0x3b, 0x4e, 0xaf,
	0x11, 0x37, 0xa7, 0x93, 0xc0, 0x14, 0x90, 0x09, 0xf0, 0x09, 0x58, 0x1d, 0x71, 0x92, 0xd3, 0x71,
	0xee, 0xad, 0x74, 0x9c, 0xde, 0xda, 0xfe, 0x4e, 0x68, 0xfa, 0x87, 0xaa, 0x7f, 0x68, 0xfb, 0x87,
	0x47, 0x24, 0xf9, 0x9f, 0xd1, 0x22, 0xde, 0xbc, 0x99, 0x04, 0x95, 0xe9, 0x24, 0x28, 0x41, 0xa8,
	0x4c, 0xe0, 0x6b, 0xb0, 0xc1, 0x49, 0x8e, 0x69, 0x71, 0xd6, 0xc7, 0xc9, 0x80, 0x16, 0x99, 0xe7,
	0x2e, 0xc1, 0xb7, 0x65, 0xf9, 0x16, 0xb0, 0x68, 0xdd, 0xec, 0x63, 0xb3, 0x85, 0x07, 0xc0, 0x15,
	0x23, 0x26, 0xbd, 0xda, 0x12, 0x94, 0x2d, 0x4b, 0xa9, 0x11, 0x48, 0xaf, 0xdd, 0xcf, 0x2e, 0x68,
	0x29, 0xcd, 0xf4, 0x7b, 0x3c, 0x23, 0x19, 0xfc, 0x0b, 0xd4, 0x87, 0x24, 0x3b, 0x9b, 0x69, 0x06,
	0xa6, 0x93, 0xc0, 0x56, 0x50, 0x6d, 0x48, 0xb2, 0xe3, 0x14, 0xee, 0x00, 0x57, 0x5e, 0x8f, 0x88,
	0x55, 0xae, 0xa1, 0x18, 0xd5, 0x1e, 0xe9, 0x55, 0xe9, 0x56, 0xde, 0xf3, 0x51, 0xba, 0x95, 0x17,
	0x2c, 0x93, 0xf9, 0x07, 0x70, 0x7f, 0xe9, 0x01, 0x0e, 0x80, 0x9b, 0x30, 0xf1, 0x48, 0x8d, 0x14,
	0x02, 0xe9, 0x15, 0x9e, 0x80, 0xc6, 0xc5, 0x18, 0x17, 0x92, 0xca, 0x6b, 0xaf, 0xbe, 0x04, 0x47,
	0xdb, 0x72, 0xcc, 0x50, 0x68, 0x96, 0xc1, 0xe7, 0xc0, 0x1d, 0xb2, 0x22, 0xf3, 0x56, 0x3b, 0x4e,
	0xaf, 0x15, 0xff, 0xa3, 0x3a, 0xa9, 0xfd, 0xd7, 0x49, 0xb0, 0x9b, 0x51, 0x79, 0x3e, 0xee, 0x87,
	0x09, 0xcb, 0x23, 0x6b, 0x74, 0x13, 0x76, 0x45, 0x3a, 0x88, 0x94, 0xb4, 0x22, 0x3c, 0x4c, 0x92,
	0xc3, 0x34, 0xe5, 0x44, 0x08, 0xa4, 0x61, 0xf0, 0x14, 0xd4, 0xc4, 0x39, 0xe3, 0xd2, 0x6b, 0x68,
	0xbe, 0x7f, 0x95, 0x8b, 0x75, 0xe1, 0xf1, 0x84, 0x06, 0x07, 0x4f, 0x40, 0xfd, 0x42, 0xcf, 0x8f,
	0xd7, 0xd4, 0x57, 0xed, 0x86, 0x8b, 0xd3, 0x19, 0x2e, 0xce, 0x58, 0xbc, 0x61, 0x2f, 0x6c, 0x91,
	0xc8, 0xc6, 0xee, 0xc7, 0x1a, 0xd8, 0x5c, 0x18, 0xf9, 0x1f, 0xce, 0x63, 0x17, 0xd4, 0x73, 0xcc,
	0x07, 0x44, 0x6a, 0x5b, 0x35, 0x8d, 0xef, 0x4c, 0x05, 0xd9, 0x08, 0x7b, 0xa0, 0x91, 0x8e, 0x39,
	0x96, 0x94, 0x15, 0xda, 0x5b, 0xcd, 0xb8, 0xa5, 0x64, 0x2e, 0x6b, 0x68, 0x96, 0xa9, 0xe9, 0x66,
	0x3c, 0x25, 0x5c, 0x3b, 0xa7, 0x69, 0xa6, 0x5b, 0x17, 0x90, 0x09, 0x4a, 0x38, 0x89, 0x07, 0x84,
	0x6b, 0x53, 0x58, 0xe1, 0x74, 0xe1, 0x27, 0x84, 0xd3, 0xb8, 0xdf, 0xea, 0x92, 0xff, 0x80, 0x3b,
	0x24, 0x99, 0xf0, 0x56, 0x3b, 0x2b, 0xbd, 0xb5, 0x7d, 0xff, 0xfb, 0x4f, 0x50, 0x8e, 0xec, 0x83,
	0x67, 0x15, 0x06, 0xe9, 0x55, 0x09, 0x20, 0x24, 0xb6, 0xc6, 0x58, 0x31, 0x02, 0xe8, 0x02, 0x32,
	0x01, 0x86, 0x00, 0x90, 0xab, 0x11, 0xb5, 0x6a, 0x36, 0xf5, 0xa9, 0x8d, 0xe9, 0x24, 0x98, 0xab,
	0xa2, 0xb9, 0x1c, 0x1e, 0x81, 0xba, 0x90, 0x9c, 0x0e, 0x88, 0x07, 0x96, 0xb8, 0xdc, 0xcc, 0x11,
	0x06, 0x83, 0x6c, 0x84, 0xa7, 0x00, 0x24, 0x2c, 0xcf, 0xa9, 0x10, 0xaa, 0xeb, 0xda, 0x12, 0x4c,
	0xd0, 0x32, 0xcd, 0xe1, 0xd0, 0x5c, 0x0e, 0xdf, 0x80, 0xb6, 0x20, 0x52, 0x0e, 0xc9, 0x19, 0x2d,
	0x12, 0x52, 0x28, 0xa3, 0x79, 0xad, 0x25, 0x78, 0xff, 0xb4, 0xbc, 0x9b, 0x06, 0x7d, 0x5c, 0x82,
	0xd1, 0x62, 0x21, 0x7e, 0x7a, 0x73, 0xe7, 0x3b, 0xb7, 0x77, 0xbe, 0xf3, 0xe5, 0xce, 0x77, 0xde,
	0xdf, 0xfb, 0x95, 0xdb, 0x7b, 0xbf, 0xf2, 0xe9, 0xde, 0xaf, 0xbc, 0x0a, 0xe7, 0x8c, 0xf2, 0xf0,
	0xcf, 0xcb, 0xe5, 0x3b, 0x56, 0x90, 0xe8, 0x6a, 0xae, 0x64, 0x5e, 0xad, 0x5f, 0xd7, 0xff, 0xa9,
	0xbf, 0xbf, 0x05, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x0a, 0xa3, 0x71, 0x21, 0x07, 0x00, 0x00,
}

func (m *DataQuotedParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataQuotedParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataQuotedParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.RemainBacking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Premium.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Final {
		i--
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataTradeLeg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataTradeLeg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataTradeLeg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Quoted.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Short) > 0 {
		i -= len(m.Short)
		copy(dAtA[i:], m.Short)
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(len(m.Short)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Long) > 0 {
		i -= len(m.Long)
		copy(dAtA[i:], m.Long)
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(len(m.Long)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Quantity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Cost.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Premium.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Backing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Type {
		i--
		if m.Type {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.LegId != 0 {
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(m.LegId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataActiveTrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataActiveTrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataActiveTrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SettleIncentive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.Strike.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.Expiration != 0 {
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x48
	}
	if m.Start != 0 {
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Legs) > 0 {
		for iNdEx := len(m.Legs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Legs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.Quantity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Taker) > 0 {
		i -= len(m.Taker)
		copy(dAtA[i:], m.Taker)
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(len(m.Taker)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Market) > 0 {
		i -= len(m.Market)
		copy(dAtA[i:], m.Market)
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(len(m.Market)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDataActiveTrade(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataActiveTrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataActiveTrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataQuotedParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDataActiveTrade(uint64(m.Id))
	}
	if m.Final {
		n += 2
	}
	l = m.Premium.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	l = m.RemainBacking.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	l = m.Spot.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	return n
}

func (m *DataTradeLeg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LegId != 0 {
		n += 1 + sovDataActiveTrade(uint64(m.LegId))
	}
	if m.Type {
		n += 2
	}
	l = m.Backing.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	l = m.Premium.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	l = m.Cost.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	l = len(m.Long)
	if l > 0 {
		n += 1 + l + sovDataActiveTrade(uint64(l))
	}
	l = len(m.Short)
	if l > 0 {
		n += 1 + l + sovDataActiveTrade(uint64(l))
	}
	l = m.Quoted.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	return n
}

func (m *DataActiveTrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDataActiveTrade(uint64(m.Id))
	}
	l = len(m.Market)
	if l > 0 {
		n += 1 + l + sovDataActiveTrade(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovDataActiveTrade(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovDataActiveTrade(uint64(l))
	}
	l = len(m.Taker)
	if l > 0 {
		n += 1 + l + sovDataActiveTrade(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	if len(m.Legs) > 0 {
		for _, e := range m.Legs {
			l = e.Size()
			n += 1 + l + sovDataActiveTrade(uint64(l))
		}
	}
	if m.Start != 0 {
		n += 1 + sovDataActiveTrade(uint64(m.Start))
	}
	if m.Expiration != 0 {
		n += 1 + sovDataActiveTrade(uint64(m.Expiration))
	}
	l = m.Strike.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	l = m.SettleIncentive.Size()
	n += 1 + l + sovDataActiveTrade(uint64(l))
	return n
}

func sovDataActiveTrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataActiveTrade(x uint64) (n int) {
	return sovDataActiveTrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataQuotedParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataActiveTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataQuotedParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataQuotedParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premium", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Premium.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainBacking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainBacking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataActiveTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataTradeLeg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataActiveTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataTradeLeg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataTradeLeg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegId", wireType)
			}
			m.LegId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LegId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Backing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premium", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Premium.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Long", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Long = append(m.Long[:0], dAtA[iNdEx:postIndex]...)
			if m.Long == nil {
				m.Long = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Short", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Short = append(m.Short[:0], dAtA[iNdEx:postIndex]...)
			if m.Short == nil {
				m.Short = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quoted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quoted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataActiveTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataActiveTrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataActiveTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataActiveTrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataActiveTrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taker = append(m.Taker[:0], dAtA[iNdEx:postIndex]...)
			if m.Taker == nil {
				m.Taker = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Legs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Legs = append(m.Legs, DataTradeLeg{})
			if err := m.Legs[len(m.Legs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strike", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Strike.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleIncentive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettleIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataActiveTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataActiveTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataActiveTrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataActiveTrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataActiveTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataActiveTrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataActiveTrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataActiveTrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataActiveTrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataActiveTrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataActiveTrade = fmt.Errorf("proto: unexpected end of group")
)
