// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/keeper/DataMarket.proto

package keeper

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DataOrderBook struct {
	Name       string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	CallAsks   OrderedList   `protobuf:"bytes,2,opt,name=call_asks,json=callAsks,proto3" json:"call_asks"`
	CallBids   OrderedList   `protobuf:"bytes,3,opt,name=call_bids,json=callBids,proto3" json:"call_bids"`
	PutAsks    OrderedList   `protobuf:"bytes,4,opt,name=put_asks,json=putAsks,proto3" json:"put_asks"`
	PutBids    OrderedList   `protobuf:"bytes,5,opt,name=put_bids,json=putBids,proto3" json:"put_bids"`
	SumBacking types.DecCoin `protobuf:"bytes,6,opt,name=sum_backing,json=sumBacking,proto3" json:"sum_backing"`
	SumWeight  types.DecCoin `protobuf:"bytes,7,opt,name=sum_weight,json=sumWeight,proto3" json:"sum_weight"`
}

func (m *DataOrderBook) Reset()         { *m = DataOrderBook{} }
func (m *DataOrderBook) String() string { return proto.CompactTextString(m) }
func (*DataOrderBook) ProtoMessage()    {}
func (*DataOrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_23e89aed8f49c399, []int{0}
}
func (m *DataOrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataOrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataOrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataOrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataOrderBook.Merge(m, src)
}
func (m *DataOrderBook) XXX_Size() int {
	return m.Size()
}
func (m *DataOrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_DataOrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_DataOrderBook proto.InternalMessageInfo

func (m *DataOrderBook) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataOrderBook) GetCallAsks() OrderedList {
	if m != nil {
		return m.CallAsks
	}
	return OrderedList{}
}

func (m *DataOrderBook) GetCallBids() OrderedList {
	if m != nil {
		return m.CallBids
	}
	return OrderedList{}
}

func (m *DataOrderBook) GetPutAsks() OrderedList {
	if m != nil {
		return m.PutAsks
	}
	return OrderedList{}
}

func (m *DataOrderBook) GetPutBids() OrderedList {
	if m != nil {
		return m.PutBids
	}
	return OrderedList{}
}

func (m *DataOrderBook) GetSumBacking() types.DecCoin {
	if m != nil {
		return m.SumBacking
	}
	return types.DecCoin{}
}

func (m *DataOrderBook) GetSumWeight() types.DecCoin {
	if m != nil {
		return m.SumWeight
	}
	return types.DecCoin{}
}

type DataMarket struct {
	Market       string                                 `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
	Description  string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description"`
	Consensus    types.DecCoin                          `protobuf:"bytes,3,opt,name=consensus,proto3" json:"consensus"`
	OrderBooks   []DataOrderBook                        `protobuf:"bytes,4,rep,name=order_books,json=orderBooks,proto3" json:"order_books"`
	TotalBacking types.DecCoin                          `protobuf:"bytes,5,opt,name=total_backing,json=totalBacking,proto3" json:"total_backing"`
	TotalSpots   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=total_spots,json=totalSpots,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_spots"`
	TotalWeight  types.DecCoin                          `protobuf:"bytes,7,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight"`
	Quotes       OrderedList                            `protobuf:"bytes,8,opt,name=quotes,proto3" json:"quotes"`
}

func (m *DataMarket) Reset()         { *m = DataMarket{} }
func (m *DataMarket) String() string { return proto.CompactTextString(m) }
func (*DataMarket) ProtoMessage()    {}
func (*DataMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_23e89aed8f49c399, []int{1}
}
func (m *DataMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataMarket.Merge(m, src)
}
func (m *DataMarket) XXX_Size() int {
	return m.Size()
}
func (m *DataMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_DataMarket.DiscardUnknown(m)
}

var xxx_messageInfo_DataMarket proto.InternalMessageInfo

func (m *DataMarket) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *DataMarket) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DataMarket) GetConsensus() types.DecCoin {
	if m != nil {
		return m.Consensus
	}
	return types.DecCoin{}
}

func (m *DataMarket) GetOrderBooks() []DataOrderBook {
	if m != nil {
		return m.OrderBooks
	}
	return nil
}

func (m *DataMarket) GetTotalBacking() types.DecCoin {
	if m != nil {
		return m.TotalBacking
	}
	return types.DecCoin{}
}

func (m *DataMarket) GetTotalWeight() types.DecCoin {
	if m != nil {
		return m.TotalWeight
	}
	return types.DecCoin{}
}

func (m *DataMarket) GetQuotes() OrderedList {
	if m != nil {
		return m.Quotes
	}
	return OrderedList{}
}

func init() {
	proto.RegisterType((*DataOrderBook)(nil), "microtick.keeper.DataOrderBook")
	proto.RegisterType((*DataMarket)(nil), "microtick.keeper.DataMarket")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/keeper/DataMarket.proto", fileDescriptor_23e89aed8f49c399)
}

var fileDescriptor_23e89aed8f49c399 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0x69, 0x9a, 0x26, 0x63, 0x0a, 0x65, 0x28, 0x92, 0x55, 0x15, 0xbb, 0xca, 0x02, 0x05,
	0x24, 0x6c, 0xa5, 0xac, 0x59, 0x60, 0x8a, 0x84, 0x10, 0x55, 0xa5, 0x41, 0x15, 0x88, 0x05, 0x91,
	0x1f, 0xa3, 0x74, 0xe4, 0xd8, 0x63, 0x3c, 0x63, 0x5e, 0x5f, 0xc0, 0x92, 0xcf, 0xea, 0xb2, 0x4b,
	0xc4, 0x22, 0x82, 0x64, 0x97, 0xaf, 0x40, 0xf3, 0x88, 0xed, 0x80, 0x40, 0xc9, 0x26, 0x73, 0xef,
	0xdc, 0x39, 0xe7, 0x9e, 0xf8, 0xdc, 0x19, 0x70, 0x3f, 0x25, 0x51, 0x41, 0x39, 0x89, 0x12, 0xef,
	0xc3, 0x30, 0xc4, 0x3c, 0x18, 0x7a, 0x09, 0xc6, 0x39, 0x2e, 0xbc, 0x93, 0x80, 0x07, 0xa7, 0x41,
	0x91, 0x60, 0xee, 0xe6, 0x05, 0xe5, 0x14, 0xee, 0x55, 0x47, 0x5d, 0x75, 0xe4, 0x60, 0x7f, 0x4c,
	0xc7, 0x54, 0x16, 0x3d, 0x11, 0xa9, 0x73, 0x07, 0x76, 0x44, 0x59, 0x4a, 0x99, 0x17, 0x06, 0x0c,
	0x57, 0xa4, 0x11, 0x25, 0x99, 0xae, 0x3f, 0xf8, 0x67, 0xcb, 0xb3, 0x22, 0xc6, 0x05, 0x8e, 0x5f,
	0x12, 0xa6, 0x7b, 0xf6, 0xbf, 0xb6, 0xc1, 0xae, 0x10, 0x22, 0x2b, 0x3e, 0xa5, 0x09, 0x3c, 0x04,
	0xed, 0x2c, 0x48, 0xb1, 0x65, 0x1c, 0x19, 0x83, 0x9e, 0xdf, 0x5d, 0x4c, 0x1d, 0x99, 0x23, 0xf9,
	0x0b, 0x4f, 0x41, 0x2f, 0x0a, 0x26, 0x93, 0x51, 0xc0, 0x12, 0x66, 0x5d, 0x3b, 0x32, 0x06, 0xe6,
	0xf1, 0x5d, 0xf7, 0x4f, 0xdd, 0x6e, 0xa3, 0x8f, 0x7f, 0xeb, 0x72, 0xea, 0xb4, 0x16, 0x53, 0xa7,
	0xc6, 0xa1, 0xae, 0x08, 0x9f, 0xb0, 0x84, 0x55, 0x74, 0x21, 0x89, 0x99, 0xb5, 0xb5, 0x39, 0x9d,
	0xc0, 0x29, 0x3a, 0x9f, 0xc4, 0x0c, 0xbe, 0x00, 0xdd, 0xbc, 0xe4, 0x4a, 0x5c, 0x7b, 0x1d, 0xb6,
	0x3d, 0xcd, 0x56, 0xc1, 0xd0, 0x4e, 0x5e, 0x72, 0x29, 0x4d, 0x73, 0x49, 0x65, 0xdb, 0x1b, 0x73,
	0x49, 0x61, 0x82, 0x4b, 0xea, 0x42, 0xc0, 0x64, 0x65, 0x3a, 0x0a, 0x83, 0x28, 0x21, 0xd9, 0xd8,
	0xea, 0x48, 0xba, 0x43, 0x57, 0xf9, 0xe8, 0x0a, 0x1f, 0x5d, 0xed, 0x94, 0x7b, 0x82, 0xa3, 0xa7,
	0x94, 0x64, 0xfe, 0x6d, 0xcd, 0xd6, 0x04, 0x22, 0xc0, 0xca, 0xd4, 0x57, 0x31, 0x3c, 0x03, 0x22,
	0x1b, 0x7d, 0xc4, 0x64, 0x7c, 0xc1, 0xad, 0x9d, 0x35, 0x28, 0xa1, 0xa6, 0x6c, 0xe0, 0x50, 0x8f,
	0x95, 0xe9, 0x6b, 0x19, 0xf6, 0x7f, 0xb5, 0x01, 0xa8, 0x67, 0x12, 0xf6, 0x41, 0x27, 0x95, 0x91,
	0x9e, 0x04, 0xb0, 0x98, 0x3a, 0x7a, 0x07, 0xe9, 0x15, 0x0e, 0x81, 0x19, 0x63, 0x16, 0x15, 0x24,
	0xe7, 0x84, 0x66, 0x72, 0x1e, 0x7a, 0xfe, 0x4d, 0xa1, 0xba, 0xb1, 0x8d, 0x9a, 0x89, 0x74, 0x9c,
	0x66, 0x0c, 0x67, 0xac, 0x5c, 0x3a, 0xfe, 0x7f, 0xd5, 0xb5, 0xe1, 0x4b, 0x18, 0xaa, 0x43, 0x78,
	0x0e, 0x4c, 0x2a, 0x3c, 0x18, 0x85, 0x94, 0x4a, 0xd3, 0xb7, 0x06, 0xe6, 0xb1, 0xf3, 0xb7, 0x51,
	0x2b, 0x33, 0x5e, 0x7f, 0xdc, 0x06, 0x16, 0x01, 0xba, 0xac, 0x33, 0xf8, 0x06, 0xec, 0x72, 0xca,
	0x83, 0x49, 0x65, 0xd9, 0xf6, 0x1a, 0x4a, 0xef, 0x68, 0xd6, 0x55, 0x28, 0xba, 0x2e, 0xd3, 0xa5,
	0x6d, 0xef, 0x80, 0xa9, 0xca, 0x2c, 0xa7, 0x9c, 0xc9, 0x51, 0xe8, 0xf9, 0x8f, 0x05, 0xf2, 0xc7,
	0xd4, 0xb9, 0x37, 0x26, 0xfc, 0xa2, 0x0c, 0xdd, 0x88, 0xa6, 0x9e, 0xbe, 0xe4, 0x6a, 0x79, 0xc8,
	0xe2, 0xc4, 0xe3, 0x9f, 0x73, 0xcc, 0x44, 0x37, 0xa1, 0xbc, 0x41, 0x82, 0x80, 0x4c, 0x5e, 0x89,
	0x18, 0x9e, 0x03, 0xd5, 0x6f, 0x93, 0xc1, 0xd8, 0xd7, 0xc2, 0x57, 0x90, 0x48, 0xb5, 0x50, 0xc3,
	0x01, 0x9f, 0x81, 0xce, 0xfb, 0x92, 0x72, 0xcc, 0xac, 0xee, 0x3a, 0x77, 0xe1, 0x86, 0x66, 0xd4,
	0x20, 0xa4, 0x57, 0xff, 0xf9, 0xe5, 0xcc, 0x36, 0xae, 0x66, 0xb6, 0xf1, 0x73, 0x66, 0x1b, 0xdf,
	0xe6, 0x76, 0xeb, 0x6a, 0x6e, 0xb7, 0xbe, 0xcf, 0xed, 0xd6, 0x5b, 0xb7, 0xf1, 0xd7, 0xeb, 0xf7,
	0x2b, 0xe5, 0x5f, 0x68, 0x86, 0xbd, 0x4f, 0x8d, 0x2d, 0xd5, 0x2d, 0xec, 0xc8, 0xf7, 0xeb, 0xd1,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x68, 0x2e, 0xb7, 0x14, 0x60, 0x05, 0x00, 0x00,
}

func (m *DataOrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataOrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataOrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SumWeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.SumBacking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.PutBids.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.PutAsks.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.CallBids.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CallAsks.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDataMarket(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Quotes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.TotalWeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.TotalSpots.Size()
		i -= size
		if _, err := m.TotalSpots.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.TotalBacking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.OrderBooks) > 0 {
		for iNdEx := len(m.OrderBooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderBooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataMarket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.Consensus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDataMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDataMarket(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Market) > 0 {
		i -= len(m.Market)
		copy(dAtA[i:], m.Market)
		i = encodeVarintDataMarket(dAtA, i, uint64(len(m.Market)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataOrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDataMarket(uint64(l))
	}
	l = m.CallAsks.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	l = m.CallBids.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	l = m.PutAsks.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	l = m.PutBids.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	l = m.SumBacking.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	l = m.SumWeight.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	return n
}

func (m *DataMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Market)
	if l > 0 {
		n += 1 + l + sovDataMarket(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDataMarket(uint64(l))
	}
	l = m.Consensus.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	if len(m.OrderBooks) > 0 {
		for _, e := range m.OrderBooks {
			l = e.Size()
			n += 1 + l + sovDataMarket(uint64(l))
		}
	}
	l = m.TotalBacking.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	l = m.TotalSpots.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	l = m.TotalWeight.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	l = m.Quotes.Size()
	n += 1 + l + sovDataMarket(uint64(l))
	return n
}

func sovDataMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataMarket(x uint64) (n int) {
	return sovDataMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataOrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataOrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataOrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallAsks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallAsks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallBids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallBids.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutAsks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PutAsks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutBids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PutBids.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumBacking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SumBacking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumWeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SumWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBooks = append(m.OrderBooks, DataOrderBook{})
			if err := m.OrderBooks[len(m.OrderBooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBacking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBacking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSpots", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSpots.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quotes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataMarket = fmt.Errorf("proto: unexpected end of group")
)
