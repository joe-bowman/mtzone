// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/types/Params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MicrotickParams struct {
	EuropeanOptions         bool                                   `protobuf:"varint,1,opt,name=european_options,json=europeanOptions,proto3" json:"european_options"`
	CommissionCreatePerunit github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=commission_create_perunit,json=commissionCreatePerunit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_create_perunit"`
	CommissionTradeFixed    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=commission_trade_fixed,json=commissionTradeFixed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_trade_fixed"`
	CommissionUpdatePerunit github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=commission_update_perunit,json=commissionUpdatePerunit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_update_perunit"`
	CommissionSettleFixed   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=commission_settle_fixed,json=commissionSettleFixed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_settle_fixed"`
	CommissionCancelPerunit github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=commission_cancel_perunit,json=commissionCancelPerunit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_cancel_perunit"`
	SettleIncentive         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=settle_incentive,json=settleIncentive,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"settle_incentive"`
	FreezeTime              int32                                  `protobuf:"varint,8,opt,name=freeze_time,json=freezeTime,proto3" json:"freeze_time"`
	MintDenom               string                                 `protobuf:"bytes,9,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom"`
	MintRewardCreatePerunit github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=mint_reward_create_perunit,json=mintRewardCreatePerunit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mint_reward_create_perunit"`
	MintRewardUpdatePerunit github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=mint_reward_update_perunit,json=mintRewardUpdatePerunit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mint_reward_update_perunit"`
	MintRewardTradeFixed    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=mint_reward_trade_fixed,json=mintRewardTradeFixed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mint_reward_trade_fixed"`
	MintRewardSettleFixed   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=mint_reward_settle_fixed,json=mintRewardSettleFixed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mint_reward_settle_fixed"`
	CancelSlashRate         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=cancel_slash_rate,json=cancelSlashRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cancel_slash_rate"`
	BackingDenom            string                                 `protobuf:"bytes,15,opt,name=backing_denom,json=backingDenom,proto3" json:"backing_denom"`
	BackingRatio            string                                 `protobuf:"bytes,16,opt,name=backing_ratio,json=backingRatio,proto3" json:"backing_ratio"`
}

func (m *MicrotickParams) Reset()         { *m = MicrotickParams{} }
func (m *MicrotickParams) String() string { return proto.CompactTextString(m) }
func (*MicrotickParams) ProtoMessage()    {}
func (*MicrotickParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e85dd8a4169bffe, []int{0}
}
func (m *MicrotickParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MicrotickParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MicrotickParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MicrotickParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicrotickParams.Merge(m, src)
}
func (m *MicrotickParams) XXX_Size() int {
	return m.Size()
}
func (m *MicrotickParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MicrotickParams.DiscardUnknown(m)
}

var xxx_messageInfo_MicrotickParams proto.InternalMessageInfo

func (m *MicrotickParams) GetEuropeanOptions() bool {
	if m != nil {
		return m.EuropeanOptions
	}
	return false
}

func (m *MicrotickParams) GetFreezeTime() int32 {
	if m != nil {
		return m.FreezeTime
	}
	return 0
}

func (m *MicrotickParams) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *MicrotickParams) GetBackingDenom() string {
	if m != nil {
		return m.BackingDenom
	}
	return ""
}

func (m *MicrotickParams) GetBackingRatio() string {
	if m != nil {
		return m.BackingRatio
	}
	return ""
}

func init() {
	proto.RegisterType((*MicrotickParams)(nil), "microtick.types.MicrotickParams")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/types/Params.proto", fileDescriptor_2e85dd8a4169bffe)
}

var fileDescriptor_2e85dd8a4169bffe = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0xde, 0x51, 0x41, 0x18, 0x7e, 0x14, 0x9a, 0x45, 0x2a, 0x87, 0x2d, 0x31, 0xc6, 0x70, 0x61,
	0x57, 0x62, 0xe2, 0xd5, 0x64, 0x21, 0x2a, 0xfe, 0x88, 0x64, 0xc0, 0x8b, 0x97, 0x66, 0xb6, 0x7d,
	0x2c, 0x13, 0x98, 0x4e, 0x33, 0x9d, 0x45, 0xe4, 0x60, 0x34, 0x1e, 0x8c, 0x37, 0xff, 0x2a, 0xc3,
	0x91, 0xa3, 0xf1, 0xd0, 0x18, 0xb8, 0xed, 0x5f, 0x61, 0x3a, 0xdd, 0xd2, 0xe9, 0xae, 0x6b, 0x52,
	0xc3, 0xa9, 0x33, 0xdf, 0x37, 0xef, 0x7b, 0xdf, 0xbc, 0xbc, 0xd7, 0xc1, 0xf7, 0x39, 0xf3, 0xa5,
	0x50, 0xcc, 0x3f, 0x6c, 0x1d, 0x6f, 0x74, 0x40, 0xd1, 0x8d, 0x96, 0xfa, 0x10, 0x41, 0xdc, 0xda,
	0xa1, 0x92, 0xf2, 0xb8, 0x19, 0x49, 0xa1, 0x84, 0x6d, 0x5d, 0x9d, 0x6a, 0x6a, 0x76, 0xa5, 0xde,
	0x15, 0x5d, 0xa1, 0xb9, 0x56, 0xba, 0xca, 0x8e, 0xdd, 0xfb, 0x31, 0x87, 0xad, 0xd7, 0xf9, 0xc9,
	0x4c, 0xc0, 0x7e, 0x82, 0x17, 0xa0, 0x27, 0x45, 0x04, 0x34, 0xf4, 0x44, 0xa4, 0x98, 0x08, 0x63,
	0x07, 0xad, 0xa2, 0xb5, 0xa9, 0x76, 0xbd, 0x9f, 0xb8, 0x23, 0x1c, 0xb1, 0x72, 0xe4, 0x4d, 0x06,
	0xd8, 0x5f, 0x11, 0xbe, 0xeb, 0x0b, 0xce, 0x59, 0x1c, 0x33, 0x11, 0x7a, 0xbe, 0x04, 0xaa, 0xc0,
	0x8b, 0x40, 0xf6, 0x42, 0xa6, 0x9c, 0x1b, 0xab, 0x68, 0x6d, 0xba, 0xfd, 0xf2, 0x2c, 0x71, 0x6b,
	0xbf, 0x12, 0xf7, 0x41, 0x97, 0xa9, 0x83, 0x5e, 0xa7, 0xe9, 0x0b, 0xde, 0xf2, 0x45, 0xcc, 0x45,
	0x3c, 0xf8, 0xac, 0xc7, 0xc1, 0x61, 0x76, 0xb1, 0xe6, 0x16, 0xf8, 0xfd, 0xc4, 0x1d, 0x2f, 0x49,
	0x96, 0x0b, 0x6a, 0x53, 0x33, 0x3b, 0x19, 0x61, 0x7f, 0xc4, 0x77, 0x8c, 0x28, 0x25, 0x69, 0x00,
	0xde, 0x3e, 0x3b, 0x81, 0xc0, 0xb9, 0xa9, 0x5d, 0x3c, 0xaf, 0xec, 0x62, 0x8c, 0x1e, 0xa9, 0x17,
	0xf8, 0x5e, 0x0a, 0x3f, 0x4d, 0xd1, 0xe1, 0x4a, 0xf4, 0xa2, 0xc0, 0xac, 0xc4, 0xad, 0x6b, 0xa8,
	0x44, 0x59, 0xd2, 0xac, 0xc4, 0x5b, 0xcd, 0xe4, 0x95, 0xf8, 0x8c, 0xb0, 0xc1, 0x79, 0x31, 0x28,
	0x75, 0x94, 0xd7, 0x62, 0x42, 0xfb, 0xd8, 0xae, 0xec, 0x63, 0x9c, 0x20, 0x59, 0x2a, 0x88, 0x5d,
	0x8d, 0xff, 0xb5, 0x1a, 0x3e, 0x0d, 0x7d, 0x38, 0xba, 0xaa, 0xc6, 0xe4, 0x75, 0xf4, 0x45, 0x49,
	0xb2, 0xd4, 0x17, 0x9a, 0xc9, 0xab, 0xc1, 0xf1, 0xc2, 0xc0, 0x30, 0x0b, 0x7d, 0x08, 0x15, 0x3b,
	0x06, 0xe7, 0xb6, 0xce, 0xdf, 0xae, 0x9c, 0x7f, 0x44, 0x89, 0x58, 0x19, 0xb2, 0x9d, 0x03, 0xf6,
	0x43, 0x3c, 0xb3, 0x2f, 0x01, 0x4e, 0xc1, 0x53, 0x8c, 0x83, 0x33, 0xb5, 0x8a, 0xd6, 0x26, 0xda,
	0x56, 0x3f, 0x71, 0x4d, 0x98, 0xe0, 0x6c, 0xb3, 0xc7, 0x38, 0xd8, 0xeb, 0x18, 0x73, 0x16, 0x2a,
	0x2f, 0x80, 0x50, 0x70, 0x67, 0x5a, 0x5b, 0x9b, 0xef, 0x27, 0xae, 0x81, 0x92, 0xe9, 0x74, 0xbd,
	0x95, 0x2e, 0xed, 0x6f, 0x08, 0xaf, 0x68, 0x46, 0xc2, 0x7b, 0x2a, 0x83, 0xe1, 0x91, 0xc3, 0x3a,
	0xfe, 0x55, 0xe5, 0xab, 0xfd, 0x43, 0x93, 0x2c, 0xa7, 0x1c, 0xd1, 0x54, 0x79, 0xe6, 0x86, 0xbd,
	0x0c, 0x35, 0xfd, 0xcc, 0x75, 0x78, 0x19, 0xee, 0xfa, 0xc2, 0x4b, 0xb9, 0xeb, 0x3f, 0x21, 0xbc,
	0x6c, 0xc6, 0x99, 0x7f, 0x80, 0xd9, 0xff, 0xed, 0xfa, 0x31, 0x82, 0xa4, 0x5e, 0xb8, 0x30, 0x7e,
	0x01, 0x5f, 0x10, 0x76, 0xcc, 0x88, 0xd2, 0xe4, 0xcd, 0x69, 0x0f, 0x2f, 0x2a, 0x7b, 0x18, 0xab,
	0x48, 0x96, 0x0a, 0x13, 0xe6, 0xe8, 0x09, 0xbc, 0x38, 0x98, 0x8d, 0xf8, 0x88, 0xc6, 0x07, 0x9e,
	0xa4, 0x0a, 0x9c, 0x79, 0x9d, 0x7d, 0xb3, 0x72, 0xf6, 0x51, 0x29, 0x62, 0x65, 0xd0, 0x6e, 0x8a,
	0x10, 0xaa, 0xc0, 0x7e, 0x8c, 0xe7, 0x3a, 0xd4, 0x3f, 0x64, 0x61, 0x77, 0xd0, 0xc3, 0x96, 0x4e,
	0xb6, 0xd8, 0x4f, 0xdc, 0x32, 0x41, 0x66, 0x07, 0xdb, 0xac, 0x93, 0x8d, 0x38, 0x49, 0x15, 0x13,
	0xce, 0xc2, 0x68, 0x9c, 0x26, 0xae, 0xe2, 0x48, 0xba, 0x6b, 0x3f, 0x3b, 0xbb, 0x68, 0xa0, 0xf3,
	0x8b, 0x06, 0xfa, 0x7d, 0xd1, 0x40, 0xdf, 0x2f, 0x1b, 0xb5, 0xf3, 0xcb, 0x46, 0xed, 0xe7, 0x65,
	0xa3, 0xf6, 0x6e, 0xdd, 0xb8, 0x57, 0xf1, 0x74, 0x72, 0x75, 0x2a, 0x42, 0x68, 0x9d, 0x18, 0x90,
	0xbe, 0x62, 0x67, 0x52, 0x3f, 0x8c, 0x8f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x70, 0x4d, 0xa4,
	0x0b, 0x67, 0x07, 0x00, 0x00,
}

func (m *MicrotickParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicrotickParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MicrotickParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BackingRatio) > 0 {
		i -= len(m.BackingRatio)
		copy(dAtA[i:], m.BackingRatio)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BackingRatio)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.BackingDenom) > 0 {
		i -= len(m.BackingDenom)
		copy(dAtA[i:], m.BackingDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BackingDenom)))
		i--
		dAtA[i] = 0x7a
	}
	{
		size := m.CancelSlashRate.Size()
		i -= size
		if _, err := m.CancelSlashRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.MintRewardSettleFixed.Size()
		i -= size
		if _, err := m.MintRewardSettleFixed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.MintRewardTradeFixed.Size()
		i -= size
		if _, err := m.MintRewardTradeFixed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.MintRewardUpdatePerunit.Size()
		i -= size
		if _, err := m.MintRewardUpdatePerunit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.MintRewardCreatePerunit.Size()
		i -= size
		if _, err := m.MintRewardCreatePerunit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0x4a
	}
	if m.FreezeTime != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FreezeTime))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.SettleIncentive.Size()
		i -= size
		if _, err := m.SettleIncentive.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.CommissionCancelPerunit.Size()
		i -= size
		if _, err := m.CommissionCancelPerunit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.CommissionSettleFixed.Size()
		i -= size
		if _, err := m.CommissionSettleFixed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.CommissionUpdatePerunit.Size()
		i -= size
		if _, err := m.CommissionUpdatePerunit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CommissionTradeFixed.Size()
		i -= size
		if _, err := m.CommissionTradeFixed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CommissionCreatePerunit.Size()
		i -= size
		if _, err := m.CommissionCreatePerunit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.EuropeanOptions {
		i--
		if m.EuropeanOptions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MicrotickParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EuropeanOptions {
		n += 2
	}
	l = m.CommissionCreatePerunit.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CommissionTradeFixed.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CommissionUpdatePerunit.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CommissionSettleFixed.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CommissionCancelPerunit.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.SettleIncentive.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.FreezeTime != 0 {
		n += 1 + sovParams(uint64(m.FreezeTime))
	}
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.MintRewardCreatePerunit.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MintRewardUpdatePerunit.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MintRewardTradeFixed.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MintRewardSettleFixed.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CancelSlashRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.BackingDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BackingRatio)
	if l > 0 {
		n += 2 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MicrotickParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicrotickParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicrotickParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EuropeanOptions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EuropeanOptions = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionCreatePerunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionCreatePerunit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionTradeFixed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionTradeFixed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionUpdatePerunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionUpdatePerunit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionSettleFixed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionSettleFixed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionCancelPerunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionCancelPerunit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleIncentive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettleIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeTime", wireType)
			}
			m.FreezeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreezeTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRewardCreatePerunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintRewardCreatePerunit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRewardUpdatePerunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintRewardUpdatePerunit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRewardTradeFixed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintRewardTradeFixed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRewardSettleFixed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintRewardSettleFixed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSlashRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CancelSlashRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackingRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
