// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/types/Genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenesisAccount struct {
	Account      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=account,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"account"`
	PlacedQuotes uint32                                        `protobuf:"varint,2,opt,name=placed_quotes,json=placedQuotes,proto3" json:"placed_quotes"`
	PlacedTrades uint32                                        `protobuf:"varint,3,opt,name=placed_trades,json=placedTrades,proto3" json:"placed_trades"`
}

func (m *GenesisAccount) Reset()         { *m = GenesisAccount{} }
func (m *GenesisAccount) String() string { return proto.CompactTextString(m) }
func (*GenesisAccount) ProtoMessage()    {}
func (*GenesisAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1a8490d25bfb0b, []int{0}
}
func (m *GenesisAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisAccount.Merge(m, src)
}
func (m *GenesisAccount) XXX_Size() int {
	return m.Size()
}
func (m *GenesisAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisAccount.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisAccount proto.InternalMessageInfo

func (m *GenesisAccount) GetAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *GenesisAccount) GetPlacedQuotes() uint32 {
	if m != nil {
		return m.PlacedQuotes
	}
	return 0
}

func (m *GenesisAccount) GetPlacedTrades() uint32 {
	if m != nil {
		return m.PlacedTrades
	}
	return 0
}

type GenesisMarket struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description"`
}

func (m *GenesisMarket) Reset()         { *m = GenesisMarket{} }
func (m *GenesisMarket) String() string { return proto.CompactTextString(m) }
func (*GenesisMarket) ProtoMessage()    {}
func (*GenesisMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1a8490d25bfb0b, []int{1}
}
func (m *GenesisMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisMarket.Merge(m, src)
}
func (m *GenesisMarket) XXX_Size() int {
	return m.Size()
}
func (m *GenesisMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisMarket.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisMarket proto.InternalMessageInfo

func (m *GenesisMarket) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenesisMarket) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type GenesisDuration struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Seconds uint32 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds"`
}

func (m *GenesisDuration) Reset()         { *m = GenesisDuration{} }
func (m *GenesisDuration) String() string { return proto.CompactTextString(m) }
func (*GenesisDuration) ProtoMessage()    {}
func (*GenesisDuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1a8490d25bfb0b, []int{2}
}
func (m *GenesisDuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisDuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisDuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisDuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisDuration.Merge(m, src)
}
func (m *GenesisDuration) XXX_Size() int {
	return m.Size()
}
func (m *GenesisDuration) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisDuration.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisDuration proto.InternalMessageInfo

func (m *GenesisDuration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenesisDuration) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

type GenesisMicrotick struct {
	Params    MicrotickParams   `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Accounts  []GenesisAccount  `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts"`
	Markets   []GenesisMarket   `protobuf:"bytes,3,rep,name=markets,proto3" json:"markets"`
	Durations []GenesisDuration `protobuf:"bytes,4,rep,name=durations,proto3" json:"durations"`
}

func (m *GenesisMicrotick) Reset()         { *m = GenesisMicrotick{} }
func (m *GenesisMicrotick) String() string { return proto.CompactTextString(m) }
func (*GenesisMicrotick) ProtoMessage()    {}
func (*GenesisMicrotick) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1a8490d25bfb0b, []int{3}
}
func (m *GenesisMicrotick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisMicrotick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisMicrotick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisMicrotick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisMicrotick.Merge(m, src)
}
func (m *GenesisMicrotick) XXX_Size() int {
	return m.Size()
}
func (m *GenesisMicrotick) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisMicrotick.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisMicrotick proto.InternalMessageInfo

func (m *GenesisMicrotick) GetParams() MicrotickParams {
	if m != nil {
		return m.Params
	}
	return MicrotickParams{}
}

func (m *GenesisMicrotick) GetAccounts() []GenesisAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *GenesisMicrotick) GetMarkets() []GenesisMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

func (m *GenesisMicrotick) GetDurations() []GenesisDuration {
	if m != nil {
		return m.Durations
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisAccount)(nil), "microtick.types.GenesisAccount")
	proto.RegisterType((*GenesisMarket)(nil), "microtick.types.GenesisMarket")
	proto.RegisterType((*GenesisDuration)(nil), "microtick.types.GenesisDuration")
	proto.RegisterType((*GenesisMicrotick)(nil), "microtick.types.GenesisMicrotick")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/types/Genesis.proto", fileDescriptor_4d1a8490d25bfb0b)
}

var fileDescriptor_4d1a8490d25bfb0b = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0x6d, 0x5a, 0x57, 0x77, 0x5d, 0x37, 0x8b, 0x43, 0x35, 0xa1, 0xa4, 0xaa, 0x98,
	0xd4, 0xcb, 0x12, 0x75, 0x48, 0x9c, 0xb8, 0xd4, 0x42, 0x1a, 0x1c, 0x26, 0x31, 0x0b, 0xed, 0xc0,
	0x05, 0x5c, 0xdb, 0x2a, 0x51, 0x49, 0x1c, 0x6c, 0x17, 0x01, 0x7f, 0x05, 0x7f, 0xd6, 0xb8, 0xed,
	0xb8, 0x53, 0x84, 0xda, 0x5b, 0xfe, 0x04, 0x4e, 0x28, 0x8e, 0x9d, 0x66, 0x4c, 0x15, 0x97, 0xe4,
	0xfd, 0xf0, 0xf7, 0xf3, 0xec, 0xf7, 0x6c, 0x70, 0x96, 0xc4, 0x54, 0x0a, 0x1d, 0xd3, 0x45, 0xf4,
	0x75, 0x32, 0xe3, 0x9a, 0x4c, 0x22, 0xfd, 0x3d, 0xe3, 0x2a, 0xba, 0xe4, 0x29, 0x57, 0xb1, 0x0a,
	0x33, 0x29, 0xb4, 0x80, 0xfd, 0x7a, 0x59, 0x68, 0xd2, 0xa7, 0x4f, 0xe6, 0x62, 0x2e, 0x4c, 0x2e,
	0x2a, 0xad, 0x6a, 0xd9, 0xe9, 0xb3, 0x6d, 0xb4, 0xb7, 0x44, 0x92, 0xc4, 0xc2, 0x46, 0xf7, 0x1e,
	0x38, 0xb2, 0xf8, 0x29, 0xa5, 0x62, 0x99, 0x6a, 0x78, 0x03, 0xda, 0xa4, 0x32, 0x07, 0xde, 0xd0,
	0x1b, 0x1f, 0xa2, 0x97, 0x45, 0x1e, 0xb8, 0xd0, 0x9f, 0x3c, 0x38, 0x9f, 0xc7, 0xfa, 0xd3, 0x72,
	0x16, 0x52, 0x91, 0x44, 0x54, 0xa8, 0x44, 0x28, 0xfb, 0x3b, 0x57, 0x6c, 0x51, 0xd5, 0x08, 0xa7,
	0x94, 0x4e, 0x19, 0x93, 0x5c, 0x29, 0xec, 0x94, 0xf0, 0x05, 0xe8, 0x65, 0x9f, 0x09, 0xe5, 0xec,
	0xc3, 0x97, 0xa5, 0xd0, 0x5c, 0x0d, 0x76, 0x86, 0xde, 0xb8, 0x87, 0x4e, 0x8a, 0x3c, 0x78, 0x98,
	0xc0, 0x87, 0x95, 0x7b, 0x6d, 0xbc, 0x86, 0x4e, 0x4b, 0xc2, 0xb8, 0x1a, 0xec, 0x3e, 0xd2, 0x55,
	0x09, 0xa7, 0x7b, 0x67, 0xbc, 0xd1, 0x47, 0xd0, 0xb3, 0x27, 0xbb, 0x22, 0x72, 0xc1, 0x35, 0x7c,
	0x0a, 0xf6, 0x52, 0x92, 0x70, 0x73, 0xaa, 0x0e, 0x3a, 0x28, 0xf2, 0xc0, 0xf8, 0xd8, 0x7c, 0xe1,
	0x04, 0x74, 0x19, 0x57, 0x54, 0xc6, 0x99, 0x8e, 0x45, 0x6a, 0x36, 0xd7, 0x41, 0xfd, 0x22, 0x0f,
	0x9a, 0x61, 0xdc, 0x74, 0x46, 0x37, 0xa0, 0x6f, 0x2b, 0xbc, 0x5a, 0x4a, 0x52, 0x86, 0xfe, 0x53,
	0xe3, 0x0c, 0xb4, 0x15, 0xa7, 0x22, 0x65, 0xee, 0xf0, 0xdd, 0xb2, 0xb5, 0x36, 0x84, 0x9d, 0x31,
	0xfa, 0xb5, 0x03, 0x8e, 0xdd, 0xd6, 0xdd, 0x10, 0xe1, 0x6b, 0xb0, 0x9f, 0x99, 0xc9, 0x19, 0x76,
	0xf7, 0x62, 0x18, 0xfe, 0x73, 0x0f, 0xc2, 0x7a, 0x6d, 0x35, 0x61, 0x74, 0x74, 0x9b, 0x07, 0xad,
	0x22, 0x0f, 0xac, 0x0e, 0xdb, 0x3f, 0xbc, 0x02, 0x07, 0x76, 0x26, 0xe5, 0x36, 0x76, 0xc7, 0xdd,
	0x8b, 0xe0, 0x11, 0xeb, 0xe1, 0x9d, 0x40, 0xc7, 0x16, 0x55, 0x0b, 0x71, 0x6d, 0xc1, 0x37, 0xa0,
	0x9d, 0x98, 0x06, 0x97, 0x93, 0x29, 0x69, 0xfe, 0x36, 0x5a, 0x35, 0x07, 0xd4, 0xb7, 0x30, 0x27,
	0xc3, 0xce, 0x80, 0xd7, 0xa0, 0xc3, 0x6c, 0x27, 0xd5, 0x60, 0xcf, 0xc0, 0x86, 0xdb, 0x60, 0xae,
	0xe5, 0xe8, 0xc4, 0xe2, 0x36, 0x52, 0xbc, 0x31, 0xd1, 0xe5, 0xed, 0xca, 0xf7, 0xee, 0x56, 0xbe,
	0xf7, 0x7b, 0xe5, 0x7b, 0x3f, 0xd7, 0x7e, 0xeb, 0x6e, 0xed, 0xb7, 0xee, 0xd7, 0x7e, 0xeb, 0x7d,
	0xf3, 0x1e, 0x6f, 0xde, 0x4a, 0xa2, 0x7f, 0x88, 0x94, 0x47, 0xdf, 0x1a, 0x21, 0x53, 0x76, 0xb6,
	0x6f, 0x1e, 0xcc, 0xf3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x29, 0x81, 0xec, 0xa6, 0x03,
	0x00, 0x00,
}

func (m *GenesisAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlacedTrades != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PlacedTrades))
		i--
		dAtA[i] = 0x18
	}
	if m.PlacedQuotes != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PlacedQuotes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisDuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisDuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisDuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seconds != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Seconds))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisMicrotick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisMicrotick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisMicrotick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Durations) > 0 {
		for iNdEx := len(m.Durations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Durations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.PlacedQuotes != 0 {
		n += 1 + sovGenesis(uint64(m.PlacedQuotes))
	}
	if m.PlacedTrades != 0 {
		n += 1 + sovGenesis(uint64(m.PlacedTrades))
	}
	return n
}

func (m *GenesisMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisDuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Seconds != 0 {
		n += 1 + sovGenesis(uint64(m.Seconds))
	}
	return n
}

func (m *GenesisMicrotick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Durations) > 0 {
		for _, e := range m.Durations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacedQuotes", wireType)
			}
			m.PlacedQuotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlacedQuotes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacedTrades", wireType)
			}
			m.PlacedTrades = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlacedTrades |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisDuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisDuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisDuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisMicrotick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisMicrotick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisMicrotick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, GenesisAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, GenesisMarket{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Durations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Durations = append(m.Durations, GenesisDuration{})
			if err := m.Durations[len(m.Durations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
