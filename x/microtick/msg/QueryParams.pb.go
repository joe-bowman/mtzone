// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/QueryParams.proto

package msg

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9a086e919647965, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	EuropeanOptions         bool   `protobuf:"varint,1,opt,name=european_options,json=europeanOptions,proto3" json:"european_options"`
	CommissionCreatePerunit string `protobuf:"bytes,2,opt,name=commission_create_perunit,json=commissionCreatePerunit,proto3" json:"commission_create_perunit"`
	CommissionTradeFixed    string `protobuf:"bytes,3,opt,name=commission_trade_fixed,json=commissionTradeFixed,proto3" json:"commission_trade_fixed"`
	CommissionUpdatePerunit string `protobuf:"bytes,4,opt,name=commission_update_perunit,json=commissionUpdatePerunit,proto3" json:"commission_update_perunit"`
	CommissionSettleFixed   string `protobuf:"bytes,5,opt,name=commission_settle_fixed,json=commissionSettleFixed,proto3" json:"commission_settle_fixed"`
	CommissionCancelPerunit string `protobuf:"bytes,6,opt,name=commission_cancel_perunit,json=commissionCancelPerunit,proto3" json:"commission_cancel_perunit"`
	SettleIncentive         string `protobuf:"bytes,7,opt,name=settle_incentive,json=settleIncentive,proto3" json:"settle_incentive"`
	FreezeTime              int32  `protobuf:"varint,8,opt,name=freeze_time,json=freezeTime,proto3" json:"freeze_time"`
	MintDenom               string `protobuf:"bytes,9,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom"`
	MintRewardCreatePerunit string `protobuf:"bytes,10,opt,name=mint_reward_create_perunit,json=mintRewardCreatePerunit,proto3" json:"mint_reward_create_perunit"`
	MintRewardUpdatePerunit string `protobuf:"bytes,11,opt,name=mint_reward_update_perunit,json=mintRewardUpdatePerunit,proto3" json:"mint_reward_update_perunit"`
	MintRewardTradeFixed    string `protobuf:"bytes,12,opt,name=mint_reward_trade_fixed,json=mintRewardTradeFixed,proto3" json:"mint_reward_trade_fixed"`
	MintRewardSettleFixed   string `protobuf:"bytes,13,opt,name=mint_reward_settle_fixed,json=mintRewardSettleFixed,proto3" json:"mint_reward_settle_fixed"`
	CancelSlashRate         string `protobuf:"bytes,14,opt,name=cancel_slash_rate,json=cancelSlashRate,proto3" json:"cancel_slash_rate"`
	BackingDenom            string `protobuf:"bytes,15,opt,name=backing_denom,json=backingDenom,proto3" json:"backing_denom"`
	BackingRatio            string `protobuf:"bytes,16,opt,name=backing_ratio,json=backingRatio,proto3" json:"backing_ratio"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9a086e919647965, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetEuropeanOptions() bool {
	if m != nil {
		return m.EuropeanOptions
	}
	return false
}

func (m *QueryParamsResponse) GetCommissionCreatePerunit() string {
	if m != nil {
		return m.CommissionCreatePerunit
	}
	return ""
}

func (m *QueryParamsResponse) GetCommissionTradeFixed() string {
	if m != nil {
		return m.CommissionTradeFixed
	}
	return ""
}

func (m *QueryParamsResponse) GetCommissionUpdatePerunit() string {
	if m != nil {
		return m.CommissionUpdatePerunit
	}
	return ""
}

func (m *QueryParamsResponse) GetCommissionSettleFixed() string {
	if m != nil {
		return m.CommissionSettleFixed
	}
	return ""
}

func (m *QueryParamsResponse) GetCommissionCancelPerunit() string {
	if m != nil {
		return m.CommissionCancelPerunit
	}
	return ""
}

func (m *QueryParamsResponse) GetSettleIncentive() string {
	if m != nil {
		return m.SettleIncentive
	}
	return ""
}

func (m *QueryParamsResponse) GetFreezeTime() int32 {
	if m != nil {
		return m.FreezeTime
	}
	return 0
}

func (m *QueryParamsResponse) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *QueryParamsResponse) GetMintRewardCreatePerunit() string {
	if m != nil {
		return m.MintRewardCreatePerunit
	}
	return ""
}

func (m *QueryParamsResponse) GetMintRewardUpdatePerunit() string {
	if m != nil {
		return m.MintRewardUpdatePerunit
	}
	return ""
}

func (m *QueryParamsResponse) GetMintRewardTradeFixed() string {
	if m != nil {
		return m.MintRewardTradeFixed
	}
	return ""
}

func (m *QueryParamsResponse) GetMintRewardSettleFixed() string {
	if m != nil {
		return m.MintRewardSettleFixed
	}
	return ""
}

func (m *QueryParamsResponse) GetCancelSlashRate() string {
	if m != nil {
		return m.CancelSlashRate
	}
	return ""
}

func (m *QueryParamsResponse) GetBackingDenom() string {
	if m != nil {
		return m.BackingDenom
	}
	return ""
}

func (m *QueryParamsResponse) GetBackingRatio() string {
	if m != nil {
		return m.BackingRatio
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "microtick.v1beta1.msg.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "microtick.v1beta1.msg.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/msg/QueryParams.proto", fileDescriptor_b9a086e919647965)
}

var fileDescriptor_b9a086e919647965 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xd3, 0x3e,
	0x1c, 0x5e, 0xfe, 0x7f, 0x36, 0x56, 0xef, 0xa5, 0x5b, 0x68, 0x59, 0x18, 0x90, 0x4c, 0xbb, 0x30,
	0x09, 0xd1, 0x32, 0x21, 0x71, 0x9d, 0x28, 0x2f, 0x12, 0x27, 0x86, 0xb7, 0x1d, 0x80, 0x43, 0xe4,
	0xa6, 0xbf, 0x65, 0xd6, 0x66, 0xbb, 0xd8, 0xce, 0x18, 0xfb, 0x14, 0x7c, 0xac, 0x1d, 0x77, 0xe4,
	0x14, 0xa1, 0xed, 0x96, 0x4f, 0x81, 0xe2, 0xb4, 0x8b, 0x93, 0xb6, 0xdc, 0xec, 0xe7, 0xad, 0x8f,
	0xea, 0x47, 0x41, 0xcf, 0x18, 0x8d, 0xa4, 0xd0, 0x34, 0x3a, 0xed, 0x9e, 0xef, 0xf6, 0x41, 0x93,
	0xdd, 0x2e, 0x53, 0x71, 0xf7, 0x73, 0x02, 0xf2, 0xe7, 0x3e, 0x91, 0x84, 0xa9, 0xce, 0x50, 0x0a,
	0x2d, 0xdc, 0xf6, 0x9d, 0xb0, 0x33, 0x12, 0x76, 0x98, 0x8a, 0x37, 0x5b, 0xb1, 0x88, 0x85, 0x51,
	0x74, 0xf3, 0x53, 0x21, 0xde, 0x6e, 0x21, 0xd7, 0x4a, 0xc0, 0xf0, 0x3d, 0x01, 0xa5, 0xb7, 0xaf,
	0x1a, 0xe8, 0x41, 0x05, 0x56, 0x43, 0xc1, 0x15, 0xb8, 0x7b, 0x68, 0x0d, 0x12, 0x29, 0x86, 0x40,
	0x78, 0x28, 0x86, 0x9a, 0x0a, 0xae, 0x3c, 0x67, 0xcb, 0xd9, 0x59, 0xec, 0xb5, 0xb2, 0x34, 0x98,
	0xe0, 0x70, 0x73, 0x8c, 0x7c, 0x2a, 0x00, 0xf7, 0x0b, 0x7a, 0x14, 0x09, 0xc6, 0xa8, 0x52, 0x54,
	0xf0, 0x30, 0x92, 0x40, 0x34, 0x84, 0x43, 0x90, 0x09, 0xa7, 0xda, 0xfb, 0x6f, 0xcb, 0xd9, 0x69,
	0xf4, 0x9e, 0x66, 0x69, 0x30, 0x5b, 0x84, 0x37, 0x4a, 0xea, 0xad, 0x61, 0xf6, 0x0b, 0xc2, 0xdd,
	0x47, 0x0f, 0x2d, 0x97, 0x96, 0x64, 0x00, 0xe1, 0x31, 0xbd, 0x80, 0x81, 0xf7, 0xbf, 0xc9, 0xdd,
	0xcc, 0xd2, 0x60, 0x86, 0x02, 0xb7, 0x4a, 0xfc, 0x30, 0x87, 0x3f, 0xe4, 0x68, 0xad, 0x6c, 0x32,
	0x1c, 0xd8, 0x65, 0xef, 0x4d, 0x2d, 0x5b, 0x15, 0xd9, 0x65, 0x8f, 0x0c, 0x33, 0x2e, 0x7b, 0x80,
	0x2c, 0x2a, 0x54, 0xa0, 0xf5, 0xd9, 0xb8, 0xed, 0xbc, 0x09, 0x7e, 0x9c, 0xa5, 0xc1, 0x2c, 0x09,
	0x6e, 0x97, 0xc4, 0x81, 0xc1, 0xa7, 0xf5, 0x8d, 0x08, 0x8f, 0xe0, 0xec, 0xae, 0xef, 0xc2, 0xf4,
	0x3f, 0xb7, 0x22, 0xaa, 0xfc, 0xb9, 0x86, 0x19, 0xf7, 0xdd, 0x43, 0x6b, 0xa3, 0x06, 0x94, 0x47,
	0xc0, 0x35, 0x3d, 0x07, 0xef, 0xbe, 0x49, 0x34, 0x0f, 0x5f, 0xe7, 0x70, 0xb3, 0x40, 0x3e, 0x8e,
	0x01, 0xf7, 0x25, 0x5a, 0x3a, 0x96, 0x00, 0x97, 0x10, 0x6a, 0xca, 0xc0, 0x5b, 0xdc, 0x72, 0x76,
	0xe6, 0x7b, 0xcd, 0x2c, 0x0d, 0x6c, 0x18, 0xa3, 0xe2, 0x72, 0x48, 0x19, 0xb8, 0x2f, 0x10, 0x62,
	0x94, 0xeb, 0x70, 0x00, 0x5c, 0x30, 0xaf, 0x61, 0x7e, 0x6c, 0x35, 0x4b, 0x03, 0x0b, 0xc5, 0x8d,
	0xfc, 0xfc, 0x2e, 0x3f, 0xba, 0xdf, 0xd0, 0xa6, 0x21, 0x24, 0xfc, 0x20, 0x72, 0x50, 0x9f, 0x16,
	0x32, 0x76, 0x3f, 0x4b, 0x83, 0x7f, 0xa8, 0xf0, 0x46, 0xce, 0x61, 0x43, 0x55, 0xb7, 0x55, 0x0b,
	0xaf, 0x4d, 0x61, 0x69, 0x7a, 0x78, 0x7d, 0x0b, 0x65, 0x78, 0x75, 0x0b, 0x18, 0x6d, 0xd8, 0x36,
	0x7b, 0xb9, 0xcb, 0xe5, 0x16, 0x66, 0x48, 0x70, 0xab, 0x8c, 0xb5, 0xa6, 0x7b, 0x84, 0x3c, 0xdb,
	0x50, 0x19, 0xd8, 0x8a, 0x09, 0x7d, 0x92, 0xa5, 0xc1, 0x4c, 0x0d, 0x6e, 0x97, 0xa9, 0xf6, 0xc2,
	0xde, 0xa0, 0xf5, 0xd1, 0x62, 0xd4, 0x19, 0x51, 0x27, 0xa1, 0x24, 0x1a, 0xbc, 0x55, 0x93, 0xd7,
	0xce, 0xd2, 0x60, 0x92, 0xc4, 0xcd, 0x02, 0x3a, 0xc8, 0x11, 0x4c, 0x34, 0xb8, 0xaf, 0xd1, 0x4a,
	0x9f, 0x44, 0xa7, 0x94, 0xc7, 0xa3, 0x97, 0x6d, 0x1a, 0xfb, 0x7a, 0x96, 0x06, 0x55, 0x02, 0x2f,
	0x8f, 0xae, 0xc5, 0xfb, 0x5a, 0x3e, 0x49, 0x34, 0x15, 0xde, 0xda, 0xa4, 0xcf, 0x10, 0x77, 0x3e,
	0x9c, 0xdf, 0x7a, 0xef, 0xaf, 0x6e, 0x7c, 0xe7, 0xfa, 0xc6, 0x77, 0xfe, 0xdc, 0xf8, 0xce, 0xaf,
	0x5b, 0x7f, 0xee, 0xfa, 0xd6, 0x9f, 0xfb, 0x7d, 0xeb, 0xcf, 0x7d, 0x7d, 0x1e, 0x53, 0x7d, 0x92,
	0xf4, 0x3b, 0x91, 0x60, 0xdd, 0xf2, 0xdb, 0xca, 0xf4, 0xa5, 0xe0, 0xd0, 0xbd, 0xb0, 0x21, 0x15,
	0xf7, 0x17, 0xcc, 0xe7, 0xf2, 0xd5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xac, 0x8b, 0x31, 0xed,
	0x86, 0x05, 0x00, 0x00,
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BackingRatio) > 0 {
		i -= len(m.BackingRatio)
		copy(dAtA[i:], m.BackingRatio)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.BackingRatio)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.BackingDenom) > 0 {
		i -= len(m.BackingDenom)
		copy(dAtA[i:], m.BackingDenom)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.BackingDenom)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CancelSlashRate) > 0 {
		i -= len(m.CancelSlashRate)
		copy(dAtA[i:], m.CancelSlashRate)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.CancelSlashRate)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MintRewardSettleFixed) > 0 {
		i -= len(m.MintRewardSettleFixed)
		copy(dAtA[i:], m.MintRewardSettleFixed)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.MintRewardSettleFixed)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.MintRewardTradeFixed) > 0 {
		i -= len(m.MintRewardTradeFixed)
		copy(dAtA[i:], m.MintRewardTradeFixed)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.MintRewardTradeFixed)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MintRewardUpdatePerunit) > 0 {
		i -= len(m.MintRewardUpdatePerunit)
		copy(dAtA[i:], m.MintRewardUpdatePerunit)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.MintRewardUpdatePerunit)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MintRewardCreatePerunit) > 0 {
		i -= len(m.MintRewardCreatePerunit)
		copy(dAtA[i:], m.MintRewardCreatePerunit)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.MintRewardCreatePerunit)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0x4a
	}
	if m.FreezeTime != 0 {
		i = encodeVarintQueryParams(dAtA, i, uint64(m.FreezeTime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SettleIncentive) > 0 {
		i -= len(m.SettleIncentive)
		copy(dAtA[i:], m.SettleIncentive)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.SettleIncentive)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CommissionCancelPerunit) > 0 {
		i -= len(m.CommissionCancelPerunit)
		copy(dAtA[i:], m.CommissionCancelPerunit)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.CommissionCancelPerunit)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CommissionSettleFixed) > 0 {
		i -= len(m.CommissionSettleFixed)
		copy(dAtA[i:], m.CommissionSettleFixed)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.CommissionSettleFixed)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CommissionUpdatePerunit) > 0 {
		i -= len(m.CommissionUpdatePerunit)
		copy(dAtA[i:], m.CommissionUpdatePerunit)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.CommissionUpdatePerunit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CommissionTradeFixed) > 0 {
		i -= len(m.CommissionTradeFixed)
		copy(dAtA[i:], m.CommissionTradeFixed)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.CommissionTradeFixed)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CommissionCreatePerunit) > 0 {
		i -= len(m.CommissionCreatePerunit)
		copy(dAtA[i:], m.CommissionCreatePerunit)
		i = encodeVarintQueryParams(dAtA, i, uint64(len(m.CommissionCreatePerunit)))
		i--
		dAtA[i] = 0x12
	}
	if m.EuropeanOptions {
		i--
		if m.EuropeanOptions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EuropeanOptions {
		n += 2
	}
	l = len(m.CommissionCreatePerunit)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.CommissionTradeFixed)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.CommissionUpdatePerunit)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.CommissionSettleFixed)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.CommissionCancelPerunit)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.SettleIncentive)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	if m.FreezeTime != 0 {
		n += 1 + sovQueryParams(uint64(m.FreezeTime))
	}
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.MintRewardCreatePerunit)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.MintRewardUpdatePerunit)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.MintRewardTradeFixed)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.MintRewardSettleFixed)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.CancelSlashRate)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.BackingDenom)
	if l > 0 {
		n += 1 + l + sovQueryParams(uint64(l))
	}
	l = len(m.BackingRatio)
	if l > 0 {
		n += 2 + l + sovQueryParams(uint64(l))
	}
	return n
}

func sovQueryParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryParams(x uint64) (n int) {
	return sovQueryParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueryParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EuropeanOptions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EuropeanOptions = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionCreatePerunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionCreatePerunit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionTradeFixed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionTradeFixed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionUpdatePerunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionUpdatePerunit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionSettleFixed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionSettleFixed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionCancelPerunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionCancelPerunit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleIncentive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettleIncentive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeTime", wireType)
			}
			m.FreezeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreezeTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRewardCreatePerunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRewardCreatePerunit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRewardUpdatePerunit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRewardUpdatePerunit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRewardTradeFixed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRewardTradeFixed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRewardSettleFixed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRewardSettleFixed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSlashRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelSlashRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackingRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryParams = fmt.Errorf("proto: unexpected end of group")
)
