// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/QueryMarket.proto

package msg

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryMarketRequest struct {
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
}

func (m *QueryMarketRequest) Reset()         { *m = QueryMarketRequest{} }
func (m *QueryMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketRequest) ProtoMessage()    {}
func (*QueryMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bf0a9c738c319c6, []int{0}
}
func (m *QueryMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketRequest.Merge(m, src)
}
func (m *QueryMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketRequest proto.InternalMessageInfo

func (m *QueryMarketRequest) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

type MarketOrderBookStatus struct {
	Name          string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	SumBacking    types.DecCoin `protobuf:"bytes,2,opt,name=sum_backing,json=sumBacking,proto3" json:"sum_backing"`
	SumWeight     types.DecCoin `protobuf:"bytes,3,opt,name=sum_weight,json=sumWeight,proto3" json:"sum_weight"`
	InsideAsk     types.DecCoin `protobuf:"bytes,4,opt,name=inside_ask,json=insideAsk,proto3" json:"inside_ask"`
	InsideBid     types.DecCoin `protobuf:"bytes,5,opt,name=inside_bid,json=insideBid,proto3" json:"inside_bid"`
	InsideCallAsk types.DecCoin `protobuf:"bytes,6,opt,name=inside_call_ask,json=insideCallAsk,proto3" json:"inside_call_ask"`
	InsideCallBid types.DecCoin `protobuf:"bytes,7,opt,name=inside_call_bid,json=insideCallBid,proto3" json:"inside_call_bid"`
	InsidePutAsk  types.DecCoin `protobuf:"bytes,8,opt,name=inside_put_ask,json=insidePutAsk,proto3" json:"inside_put_ask"`
	InsidePutBid  types.DecCoin `protobuf:"bytes,9,opt,name=inside_put_bid,json=insidePutBid,proto3" json:"inside_put_bid"`
}

func (m *MarketOrderBookStatus) Reset()         { *m = MarketOrderBookStatus{} }
func (m *MarketOrderBookStatus) String() string { return proto.CompactTextString(m) }
func (*MarketOrderBookStatus) ProtoMessage()    {}
func (*MarketOrderBookStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bf0a9c738c319c6, []int{1}
}
func (m *MarketOrderBookStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketOrderBookStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketOrderBookStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketOrderBookStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketOrderBookStatus.Merge(m, src)
}
func (m *MarketOrderBookStatus) XXX_Size() int {
	return m.Size()
}
func (m *MarketOrderBookStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketOrderBookStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MarketOrderBookStatus proto.InternalMessageInfo

func (m *MarketOrderBookStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MarketOrderBookStatus) GetSumBacking() types.DecCoin {
	if m != nil {
		return m.SumBacking
	}
	return types.DecCoin{}
}

func (m *MarketOrderBookStatus) GetSumWeight() types.DecCoin {
	if m != nil {
		return m.SumWeight
	}
	return types.DecCoin{}
}

func (m *MarketOrderBookStatus) GetInsideAsk() types.DecCoin {
	if m != nil {
		return m.InsideAsk
	}
	return types.DecCoin{}
}

func (m *MarketOrderBookStatus) GetInsideBid() types.DecCoin {
	if m != nil {
		return m.InsideBid
	}
	return types.DecCoin{}
}

func (m *MarketOrderBookStatus) GetInsideCallAsk() types.DecCoin {
	if m != nil {
		return m.InsideCallAsk
	}
	return types.DecCoin{}
}

func (m *MarketOrderBookStatus) GetInsideCallBid() types.DecCoin {
	if m != nil {
		return m.InsideCallBid
	}
	return types.DecCoin{}
}

func (m *MarketOrderBookStatus) GetInsidePutAsk() types.DecCoin {
	if m != nil {
		return m.InsidePutAsk
	}
	return types.DecCoin{}
}

func (m *MarketOrderBookStatus) GetInsidePutBid() types.DecCoin {
	if m != nil {
		return m.InsidePutBid
	}
	return types.DecCoin{}
}

type QueryMarketResponse struct {
	Market       string                   `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
	Description  string                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description"`
	Consensus    types.DecCoin            `protobuf:"bytes,3,opt,name=consensus,proto3" json:"consensus"`
	OrderBooks   []*MarketOrderBookStatus `protobuf:"bytes,4,rep,name=order_books,json=orderBooks,proto3" json:"order_books"`
	TotalBacking types.DecCoin            `protobuf:"bytes,5,opt,name=total_backing,json=totalBacking,proto3" json:"total_backing"`
	TotalWeight  types.DecCoin            `protobuf:"bytes,6,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight"`
}

func (m *QueryMarketResponse) Reset()         { *m = QueryMarketResponse{} }
func (m *QueryMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketResponse) ProtoMessage()    {}
func (*QueryMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bf0a9c738c319c6, []int{2}
}
func (m *QueryMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketResponse.Merge(m, src)
}
func (m *QueryMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketResponse proto.InternalMessageInfo

func (m *QueryMarketResponse) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *QueryMarketResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *QueryMarketResponse) GetConsensus() types.DecCoin {
	if m != nil {
		return m.Consensus
	}
	return types.DecCoin{}
}

func (m *QueryMarketResponse) GetOrderBooks() []*MarketOrderBookStatus {
	if m != nil {
		return m.OrderBooks
	}
	return nil
}

func (m *QueryMarketResponse) GetTotalBacking() types.DecCoin {
	if m != nil {
		return m.TotalBacking
	}
	return types.DecCoin{}
}

func (m *QueryMarketResponse) GetTotalWeight() types.DecCoin {
	if m != nil {
		return m.TotalWeight
	}
	return types.DecCoin{}
}

func init() {
	proto.RegisterType((*QueryMarketRequest)(nil), "microtick.v1beta1.msg.QueryMarketRequest")
	proto.RegisterType((*MarketOrderBookStatus)(nil), "microtick.v1beta1.msg.MarketOrderBookStatus")
	proto.RegisterType((*QueryMarketResponse)(nil), "microtick.v1beta1.msg.QueryMarketResponse")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/msg/QueryMarket.proto", fileDescriptor_6bf0a9c738c319c6)
}

var fileDescriptor_6bf0a9c738c319c6 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xe3, 0xa7, 0x69, 0x9e, 0x7a, 0xdd, 0x52, 0xb1, 0x6d, 0xc0, 0xaa, 0x2a, 0x27, 0xca,
	0x85, 0x48, 0x20, 0x5b, 0x29, 0x17, 0xae, 0xb8, 0x70, 0xac, 0x0a, 0x8b, 0x10, 0xa8, 0x12, 0x44,
	0x7e, 0x59, 0xb9, 0x2b, 0xc7, 0xde, 0xe0, 0x5d, 0xf3, 0xf6, 0x29, 0xf8, 0x58, 0x3d, 0x70, 0xe8,
	0x91, 0x53, 0x84, 0x92, 0x5b, 0x8e, 0x7c, 0x02, 0xb4, 0x2f, 0x49, 0x9c, 0xa8, 0x07, 0x93, 0x4b,
	0x32, 0x33, 0x3b, 0xff, 0x9f, 0xff, 0x2b, 0xcd, 0x2c, 0x78, 0x94, 0x91, 0xa8, 0xa0, 0x9c, 0x44,
	0xa9, 0xf7, 0x79, 0x10, 0x62, 0x1e, 0x0c, 0xbc, 0x8c, 0x25, 0xde, 0xeb, 0x12, 0x17, 0xdf, 0x2e,
	0x82, 0x22, 0xc5, 0xdc, 0x1d, 0x17, 0x94, 0x53, 0xd8, 0x5e, 0x36, 0xba, 0xba, 0xd1, 0xcd, 0x58,
	0x72, 0x72, 0x9c, 0xd0, 0x84, 0xca, 0x0e, 0x4f, 0x44, 0xaa, 0xf9, 0xc4, 0x89, 0x28, 0xcb, 0x28,
	0xf3, 0xc2, 0x80, 0xe1, 0x25, 0x37, 0xa2, 0x24, 0x57, 0xe7, 0xbd, 0x67, 0x00, 0x56, 0xbe, 0x80,
	0xf0, 0xa7, 0x12, 0x33, 0x0e, 0x7b, 0xa0, 0x95, 0xc9, 0x82, 0x6d, 0x74, 0x8d, 0xbe, 0xe9, 0x83,
	0xf9, 0xa4, 0xa3, 0x2b, 0x48, 0xff, 0xf7, 0xfe, 0xec, 0x82, 0xb6, 0x52, 0x5d, 0x16, 0x31, 0x2e,
	0x7c, 0x4a, 0xd3, 0x37, 0x3c, 0xe0, 0x25, 0x83, 0xa7, 0xa0, 0x99, 0x07, 0x19, 0xd6, 0xda, 0xbd,
	0xf9, 0xa4, 0x23, 0x73, 0x24, 0x7f, 0x21, 0x02, 0x16, 0x2b, 0xb3, 0x61, 0x18, 0x44, 0x29, 0xc9,
	0x13, 0xfb, 0xbf, 0xae, 0xd1, 0xb7, 0xce, 0x4e, 0x5d, 0xe5, 0xd3, 0x15, 0x3e, 0x97, 0xd7, 0x7a,
	0x81, 0xa3, 0x73, 0x4a, 0x72, 0xff, 0xe8, 0x66, 0xd2, 0x69, 0xcc, 0x27, 0x9d, 0xaa, 0x10, 0x01,
	0x56, 0x66, 0xbe, 0x8a, 0xe1, 0x25, 0x10, 0xd9, 0xf0, 0x0b, 0x26, 0xc9, 0x35, 0xb7, 0x77, 0x6a,
	0x20, 0xa1, 0x46, 0x56, 0x74, 0xc8, 0x64, 0x65, 0xf6, 0x4e, 0x86, 0x02, 0x48, 0x72, 0x46, 0x62,
	0x3c, 0x0c, 0x58, 0x6a, 0x37, 0xff, 0x05, 0xb8, 0xd2, 0x21, 0x53, 0xc5, 0xcf, 0x59, 0x5a, 0x01,
	0x86, 0x24, 0xb6, 0x77, 0xb7, 0x00, 0x86, 0x24, 0x5e, 0x00, 0x7d, 0x12, 0xc3, 0x0f, 0xe0, 0x50,
	0x1f, 0x44, 0xc1, 0x68, 0x24, 0x6d, 0xb6, 0x6a, 0x50, 0x1f, 0x6a, 0xea, 0xa6, 0x18, 0x1d, 0xa8,
	0xc2, 0x79, 0x30, 0x1a, 0x09, 0xbf, 0x1b, 0x78, 0x61, 0xfa, 0xff, 0x6d, 0xf1, 0xc2, 0x79, 0x05,
	0x2f, 0xdc, 0x5f, 0x81, 0x7b, 0xba, 0x63, 0x5c, 0x72, 0x69, 0x7e, 0xaf, 0x06, 0xfd, 0x81, 0xa6,
	0x6f, 0x68, 0xd1, 0xbe, 0xca, 0x5f, 0x95, 0x5c, 0x58, 0x5f, 0x67, 0x0b, 0xe7, 0xe6, 0x96, 0x6c,
	0x61, 0x7c, 0xc5, 0xf6, 0x49, 0xdc, 0xfb, 0xb9, 0x03, 0x8e, 0xd6, 0xf6, 0x85, 0x8d, 0x69, 0xce,
	0x70, 0x9d, 0x85, 0x81, 0x03, 0x60, 0xc5, 0x98, 0x45, 0x05, 0x19, 0x73, 0x42, 0x73, 0x39, 0xf8,
	0xa6, 0x7f, 0x28, 0xc6, 0xba, 0x52, 0x46, 0xd5, 0x04, 0x5e, 0x00, 0x33, 0x12, 0xfc, 0x9c, 0x95,
	0xac, 0xd6, 0x58, 0xdf, 0xd7, 0xb7, 0x58, 0xc9, 0xd0, 0x2a, 0x84, 0x1f, 0x81, 0x45, 0xc5, 0xae,
	0x0e, 0x43, 0x4a, 0x53, 0x66, 0x37, 0xbb, 0x3b, 0x7d, 0xeb, 0xec, 0x89, 0x7b, 0xe7, 0x7b, 0xe2,
	0xde, 0xb9, 0xdb, 0xca, 0x6f, 0x05, 0x82, 0x00, 0x5d, 0x74, 0x30, 0xf8, 0x1e, 0x1c, 0x70, 0xca,
	0x83, 0xd1, 0x72, 0xb9, 0xeb, 0xcc, 0x79, 0x5b, 0x5b, 0x5e, 0x97, 0xa2, 0x7d, 0x99, 0x2e, 0x16,
	0xfc, 0x2d, 0x50, 0xf9, 0x62, 0xc5, 0xeb, 0x8c, 0xfa, 0xb1, 0x06, 0xaf, 0x29, 0x91, 0x25, 0x33,
	0xb5, 0xe6, 0xfe, 0xcb, 0x9b, 0xa9, 0x63, 0xdc, 0x4e, 0x1d, 0xe3, 0xf7, 0xd4, 0x31, 0x7e, 0xcc,
	0x9c, 0xc6, 0xed, 0xcc, 0x69, 0xfc, 0x9a, 0x39, 0x8d, 0xab, 0xc7, 0x09, 0xe1, 0xd7, 0x65, 0xe8,
	0x46, 0x34, 0xf3, 0x56, 0x0f, 0x73, 0xc6, 0xbf, 0xd3, 0x1c, 0x7b, 0x5f, 0xab, 0x25, 0x96, 0x84,
	0x2d, 0xf9, 0x96, 0x3e, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x36, 0x37, 0x21, 0xa4, 0xc3, 0x05,
	0x00, 0x00,
}

func (m *QueryMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Market) > 0 {
		i -= len(m.Market)
		copy(dAtA[i:], m.Market)
		i = encodeVarintQueryMarket(dAtA, i, uint64(len(m.Market)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketOrderBookStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketOrderBookStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketOrderBookStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InsidePutBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.InsidePutAsk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.InsideCallBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.InsideCallAsk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.InsideBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.InsideAsk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.SumWeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SumBacking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryMarket(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalWeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.TotalBacking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.OrderBooks) > 0 {
		for iNdEx := len(m.OrderBooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderBooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryMarket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.Consensus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintQueryMarket(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Market) > 0 {
		i -= len(m.Market)
		copy(dAtA[i:], m.Market)
		i = encodeVarintQueryMarket(dAtA, i, uint64(len(m.Market)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Market)
	if l > 0 {
		n += 1 + l + sovQueryMarket(uint64(l))
	}
	return n
}

func (m *MarketOrderBookStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryMarket(uint64(l))
	}
	l = m.SumBacking.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	l = m.SumWeight.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	l = m.InsideAsk.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	l = m.InsideBid.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	l = m.InsideCallAsk.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	l = m.InsideCallBid.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	l = m.InsidePutAsk.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	l = m.InsidePutBid.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	return n
}

func (m *QueryMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Market)
	if l > 0 {
		n += 1 + l + sovQueryMarket(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovQueryMarket(uint64(l))
	}
	l = m.Consensus.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	if len(m.OrderBooks) > 0 {
		for _, e := range m.OrderBooks {
			l = e.Size()
			n += 1 + l + sovQueryMarket(uint64(l))
		}
	}
	l = m.TotalBacking.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	l = m.TotalWeight.Size()
	n += 1 + l + sovQueryMarket(uint64(l))
	return n
}

func sovQueryMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryMarket(x uint64) (n int) {
	return sovQueryMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketOrderBookStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketOrderBookStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketOrderBookStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumBacking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SumBacking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumWeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SumWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideAsk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsideAsk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsideBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideCallAsk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsideCallAsk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideCallBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsideCallBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsidePutAsk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsidePutAsk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsidePutBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InsidePutBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBooks = append(m.OrderBooks, &MarketOrderBookStatus{})
			if err := m.OrderBooks[len(m.OrderBooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBacking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBacking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryMarket = fmt.Errorf("proto: unexpected end of group")
)
