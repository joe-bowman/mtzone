// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/TxWithdraw.proto

package msg

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxWithdrawQuote struct {
	Id        uint32                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Requester github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=requester,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"requester"`
	Withdraw  string                                        `protobuf:"bytes,3,opt,name=withdraw,proto3" json:"withdraw"`
}

func (m *TxWithdrawQuote) Reset()         { *m = TxWithdrawQuote{} }
func (m *TxWithdrawQuote) String() string { return proto.CompactTextString(m) }
func (*TxWithdrawQuote) ProtoMessage()    {}
func (*TxWithdrawQuote) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e032946ed0eaa91, []int{0}
}
func (m *TxWithdrawQuote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxWithdrawQuote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxWithdrawQuote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxWithdrawQuote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxWithdrawQuote.Merge(m, src)
}
func (m *TxWithdrawQuote) XXX_Size() int {
	return m.Size()
}
func (m *TxWithdrawQuote) XXX_DiscardUnknown() {
	xxx_messageInfo_TxWithdrawQuote.DiscardUnknown(m)
}

var xxx_messageInfo_TxWithdrawQuote proto.InternalMessageInfo

func (m *TxWithdrawQuote) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TxWithdrawQuote) GetRequester() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Requester
	}
	return nil
}

func (m *TxWithdrawQuote) GetWithdraw() string {
	if m != nil {
		return m.Withdraw
	}
	return ""
}

type WithdrawQuoteData struct {
	Time       int64         `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	Market     string        `protobuf:"bytes,2,opt,name=market,proto3" json:"market"`
	Duration   string        `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration"`
	Consensus  types.DecCoin `protobuf:"bytes,4,opt,name=consensus,proto3" json:"consensus"`
	Backing    types.DecCoin `protobuf:"bytes,5,opt,name=backing,proto3" json:"backing"`
	Commission types.DecCoin `protobuf:"bytes,6,opt,name=commission,proto3" json:"commission"`
}

func (m *WithdrawQuoteData) Reset()         { *m = WithdrawQuoteData{} }
func (m *WithdrawQuoteData) String() string { return proto.CompactTextString(m) }
func (*WithdrawQuoteData) ProtoMessage()    {}
func (*WithdrawQuoteData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e032946ed0eaa91, []int{1}
}
func (m *WithdrawQuoteData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawQuoteData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawQuoteData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawQuoteData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawQuoteData.Merge(m, src)
}
func (m *WithdrawQuoteData) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawQuoteData) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawQuoteData.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawQuoteData proto.InternalMessageInfo

func (m *WithdrawQuoteData) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *WithdrawQuoteData) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *WithdrawQuoteData) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *WithdrawQuoteData) GetConsensus() types.DecCoin {
	if m != nil {
		return m.Consensus
	}
	return types.DecCoin{}
}

func (m *WithdrawQuoteData) GetBacking() types.DecCoin {
	if m != nil {
		return m.Backing
	}
	return types.DecCoin{}
}

func (m *WithdrawQuoteData) GetCommission() types.DecCoin {
	if m != nil {
		return m.Commission
	}
	return types.DecCoin{}
}

func init() {
	proto.RegisterType((*TxWithdrawQuote)(nil), "microtick.v1beta1.msg.TxWithdrawQuote")
	proto.RegisterType((*WithdrawQuoteData)(nil), "microtick.v1beta1.msg.WithdrawQuoteData")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/msg/TxWithdraw.proto", fileDescriptor_7e032946ed0eaa91)
}

var fileDescriptor_7e032946ed0eaa91 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x6b, 0xd4, 0x40,
	0x1c, 0xdd, 0x49, 0xeb, 0xda, 0x1d, 0x2b, 0xa5, 0x83, 0x4a, 0x28, 0x25, 0x59, 0xf6, 0x20, 0x01,
	0x69, 0x42, 0xf5, 0x2e, 0x34, 0x56, 0x3c, 0x09, 0x3a, 0x08, 0x82, 0x78, 0x99, 0xcc, 0x0c, 0xe9,
	0xb0, 0x4c, 0xa6, 0xce, 0x6f, 0x62, 0xab, 0x9f, 0xc2, 0xaf, 0xe2, 0xb7, 0xe8, 0xb1, 0x47, 0x4f,
	0x41, 0x76, 0x4f, 0xe6, 0x23, 0x78, 0x92, 0x64, 0xb3, 0x49, 0xbc, 0xf5, 0x92, 0x79, 0x79, 0xf3,
	0xde, 0x9b, 0x37, 0x7f, 0xf0, 0x53, 0xad, 0xb8, 0x35, 0x4e, 0xf1, 0x65, 0xf2, 0xf5, 0x34, 0x93,
	0x8e, 0x9d, 0x26, 0x1a, 0xf2, 0xe4, 0xc3, 0xf5, 0x47, 0xe5, 0x2e, 0x84, 0x65, 0x57, 0xf1, 0xa5,
	0x35, 0xce, 0x90, 0xc7, 0xbd, 0x2e, 0xee, 0x74, 0xb1, 0x86, 0xfc, 0xe8, 0x51, 0x6e, 0x72, 0xd3,
	0x2a, 0x92, 0x06, 0x6d, 0xc4, 0x47, 0x01, 0x37, 0xa0, 0x0d, 0x24, 0x19, 0x03, 0xd9, 0xc7, 0x72,
	0xa3, 0x8a, 0xcd, 0xfc, 0xe2, 0x27, 0xc2, 0x07, 0xc3, 0x0a, 0xef, 0x4b, 0xe3, 0x24, 0x79, 0x82,
	0x3d, 0x25, 0x7c, 0x34, 0x47, 0xd1, 0xc3, 0x74, 0x5a, 0x57, 0xa1, 0xa7, 0x04, 0xf5, 0x94, 0x20,
	0x9f, 0xf1, 0xcc, 0xca, 0x2f, 0xa5, 0x04, 0x27, 0xad, 0xef, 0xcd, 0x51, 0xb4, 0x9f, 0xbe, 0xac,
	0xab, 0x70, 0x20, 0xff, 0x56, 0xe1, 0x49, 0xae, 0xdc, 0x45, 0x99, 0xc5, 0xdc, 0xe8, 0xa4, 0x5b,
	0x7a, 0x33, 0x9c, 0x80, 0x58, 0x26, 0xee, 0xdb, 0xa5, 0x84, 0xf8, 0x8c, 0xf3, 0x33, 0x21, 0xac,
	0x04, 0xa0, 0x83, 0x97, 0x44, 0x78, 0xef, 0xaa, 0xab, 0xe1, 0xef, 0xcc, 0x51, 0x34, 0x4b, 0xf7,
	0xeb, 0x2a, 0xec, 0x39, 0xda, 0xa3, 0xc5, 0x1f, 0x0f, 0x1f, 0xfe, 0xd7, 0xf8, 0x9c, 0x39, 0x46,
	0x8e, 0xf1, 0xae, 0x53, 0x5a, 0xb6, 0xbd, 0x77, 0xd2, 0xbd, 0xba, 0x0a, 0xdb, 0x7f, 0xda, 0x7e,
	0xc9, 0x02, 0x4f, 0x35, 0xb3, 0x4b, 0xe9, 0xda, 0xe2, 0xb3, 0x14, 0xd7, 0x55, 0xd8, 0x31, 0xb4,
	0x1b, 0x9b, 0x06, 0xa2, 0xb4, 0xcc, 0x29, 0x53, 0x8c, 0x1b, 0x6c, 0x39, 0xda, 0x23, 0xf2, 0x16,
	0xcf, 0xb8, 0x29, 0x40, 0x16, 0x50, 0x82, 0xbf, 0x3b, 0x47, 0xd1, 0x83, 0xe7, 0xc7, 0xf1, 0x66,
	0x9f, 0x71, 0x73, 0xd2, 0xfd, 0xc5, 0x9c, 0x4b, 0xfe, 0xca, 0xa8, 0x22, 0x3d, 0xbc, 0xa9, 0xc2,
	0x49, 0x73, 0x56, 0xbd, 0x8d, 0x0e, 0x90, 0xbc, 0xc1, 0xf7, 0x33, 0xc6, 0x97, 0xaa, 0xc8, 0xfd,
	0x7b, 0x77, 0x08, 0x3b, 0xe8, 0xc2, 0xb6, 0x26, 0xba, 0x05, 0xe4, 0x1d, 0xc6, 0xdc, 0x68, 0xad,
	0x00, 0x9a, 0x3d, 0x4c, 0xef, 0x90, 0x45, 0xba, 0xac, 0x91, 0x8f, 0x8e, 0x70, 0xfa, 0xfa, 0x66,
	0x15, 0xa0, 0xdb, 0x55, 0x80, 0x7e, 0xaf, 0x02, 0xf4, 0x63, 0x1d, 0x4c, 0x6e, 0xd7, 0xc1, 0xe4,
	0xd7, 0x3a, 0x98, 0x7c, 0x7a, 0x36, 0xba, 0xe9, 0xe1, 0xe5, 0x6a, 0xf7, 0xdd, 0x14, 0x32, 0xb9,
	0x1e, 0x53, 0x90, 0x67, 0xd3, 0xf6, 0xb5, 0xbd, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff, 0x14, 0x5e,
	0x4d, 0xb7, 0xe4, 0x02, 0x00, 0x00,
}

func (m *TxWithdrawQuote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxWithdrawQuote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxWithdrawQuote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Withdraw) > 0 {
		i -= len(m.Withdraw)
		copy(dAtA[i:], m.Withdraw)
		i = encodeVarintTxWithdraw(dAtA, i, uint64(len(m.Withdraw)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintTxWithdraw(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTxWithdraw(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawQuoteData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawQuoteData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawQuoteData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxWithdraw(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Backing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxWithdraw(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Consensus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxWithdraw(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTxWithdraw(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Market) > 0 {
		i -= len(m.Market)
		copy(dAtA[i:], m.Market)
		i = encodeVarintTxWithdraw(dAtA, i, uint64(len(m.Market)))
		i--
		dAtA[i] = 0x12
	}
	if m.Time != 0 {
		i = encodeVarintTxWithdraw(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxWithdraw(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxWithdraw(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxWithdrawQuote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTxWithdraw(uint64(m.Id))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovTxWithdraw(uint64(l))
	}
	l = len(m.Withdraw)
	if l > 0 {
		n += 1 + l + sovTxWithdraw(uint64(l))
	}
	return n
}

func (m *WithdrawQuoteData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTxWithdraw(uint64(m.Time))
	}
	l = len(m.Market)
	if l > 0 {
		n += 1 + l + sovTxWithdraw(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTxWithdraw(uint64(l))
	}
	l = m.Consensus.Size()
	n += 1 + l + sovTxWithdraw(uint64(l))
	l = m.Backing.Size()
	n += 1 + l + sovTxWithdraw(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovTxWithdraw(uint64(l))
	return n
}

func sovTxWithdraw(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxWithdraw(x uint64) (n int) {
	return sovTxWithdraw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxWithdrawQuote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxWithdraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxWithdrawQuote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxWithdrawQuote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = append(m.Requester[:0], dAtA[iNdEx:postIndex]...)
			if m.Requester == nil {
				m.Requester = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdraw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxWithdraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawQuoteData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxWithdraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawQuoteData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawQuoteData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Backing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxWithdraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxWithdraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxWithdraw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxWithdraw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxWithdraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxWithdraw
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxWithdraw
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxWithdraw
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxWithdraw        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxWithdraw          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxWithdraw = fmt.Errorf("proto: unexpected end of group")
)
