// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/TxSettle.proto

package msg

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxSettleTrade struct {
	Id        uint32                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Requester github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=requester,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"requester"`
}

func (m *TxSettleTrade) Reset()         { *m = TxSettleTrade{} }
func (m *TxSettleTrade) String() string { return proto.CompactTextString(m) }
func (*TxSettleTrade) ProtoMessage()    {}
func (*TxSettleTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_5912fbd4715125e2, []int{0}
}
func (m *TxSettleTrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxSettleTrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxSettleTrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxSettleTrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxSettleTrade.Merge(m, src)
}
func (m *TxSettleTrade) XXX_Size() int {
	return m.Size()
}
func (m *TxSettleTrade) XXX_DiscardUnknown() {
	xxx_messageInfo_TxSettleTrade.DiscardUnknown(m)
}

var xxx_messageInfo_TxSettleTrade proto.InternalMessageInfo

func (m *TxSettleTrade) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TxSettleTrade) GetRequester() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Requester
	}
	return nil
}

type SettleLegData struct {
	LegId         uint32                                        `protobuf:"varint,1,opt,name=leg_id,json=legId,proto3" json:"leg_id"`
	SettleAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=settle_account,json=settleAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"settle_account"`
	Settle        types.DecCoin                                 `protobuf:"bytes,3,opt,name=settle,proto3" json:"settle"`
	RefundAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=refund_account,json=refundAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"refund_account"`
	Refund        types.DecCoin                                 `protobuf:"bytes,5,opt,name=refund,proto3" json:"refund"`
}

func (m *SettleLegData) Reset()         { *m = SettleLegData{} }
func (m *SettleLegData) String() string { return proto.CompactTextString(m) }
func (*SettleLegData) ProtoMessage()    {}
func (*SettleLegData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5912fbd4715125e2, []int{1}
}
func (m *SettleLegData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettleLegData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettleLegData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettleLegData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleLegData.Merge(m, src)
}
func (m *SettleLegData) XXX_Size() int {
	return m.Size()
}
func (m *SettleLegData) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleLegData.DiscardUnknown(m)
}

var xxx_messageInfo_SettleLegData proto.InternalMessageInfo

func (m *SettleLegData) GetLegId() uint32 {
	if m != nil {
		return m.LegId
	}
	return 0
}

func (m *SettleLegData) GetSettleAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.SettleAccount
	}
	return nil
}

func (m *SettleLegData) GetSettle() types.DecCoin {
	if m != nil {
		return m.Settle
	}
	return types.DecCoin{}
}

func (m *SettleLegData) GetRefundAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.RefundAccount
	}
	return nil
}

func (m *SettleLegData) GetRefund() types.DecCoin {
	if m != nil {
		return m.Refund
	}
	return types.DecCoin{}
}

type SettleTradeData struct {
	Time       int64                                         `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	Id         uint32                                        `protobuf:"varint,2,opt,name=id,proto3" json:"id"`
	Final      types.DecCoin                                 `protobuf:"bytes,3,opt,name=final,proto3" json:"final"`
	Legs       []SettleLegData                               `protobuf:"bytes,4,rep,name=legs,proto3" json:"legs"`
	Incentive  types.DecCoin                                 `protobuf:"bytes,5,opt,name=incentive,proto3" json:"incentive"`
	Settler    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,6,opt,name=settler,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"settler"`
	Commission types.DecCoin                                 `protobuf:"bytes,7,opt,name=commission,proto3" json:"commission"`
	Reward     types.Coin                                    `protobuf:"bytes,8,opt,name=reward,proto3" json:"reward"`
}

func (m *SettleTradeData) Reset()         { *m = SettleTradeData{} }
func (m *SettleTradeData) String() string { return proto.CompactTextString(m) }
func (*SettleTradeData) ProtoMessage()    {}
func (*SettleTradeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5912fbd4715125e2, []int{2}
}
func (m *SettleTradeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettleTradeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettleTradeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettleTradeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleTradeData.Merge(m, src)
}
func (m *SettleTradeData) XXX_Size() int {
	return m.Size()
}
func (m *SettleTradeData) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleTradeData.DiscardUnknown(m)
}

var xxx_messageInfo_SettleTradeData proto.InternalMessageInfo

func (m *SettleTradeData) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SettleTradeData) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SettleTradeData) GetFinal() types.DecCoin {
	if m != nil {
		return m.Final
	}
	return types.DecCoin{}
}

func (m *SettleTradeData) GetLegs() []SettleLegData {
	if m != nil {
		return m.Legs
	}
	return nil
}

func (m *SettleTradeData) GetIncentive() types.DecCoin {
	if m != nil {
		return m.Incentive
	}
	return types.DecCoin{}
}

func (m *SettleTradeData) GetSettler() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Settler
	}
	return nil
}

func (m *SettleTradeData) GetCommission() types.DecCoin {
	if m != nil {
		return m.Commission
	}
	return types.DecCoin{}
}

func (m *SettleTradeData) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*TxSettleTrade)(nil), "microtick.v1beta1.msg.TxSettleTrade")
	proto.RegisterType((*SettleLegData)(nil), "microtick.v1beta1.msg.SettleLegData")
	proto.RegisterType((*SettleTradeData)(nil), "microtick.v1beta1.msg.SettleTradeData")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/msg/TxSettle.proto", fileDescriptor_5912fbd4715125e2)
}

var fileDescriptor_5912fbd4715125e2 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0xfe, 0xda, 0xe6, 0xad, 0x43, 0x58, 0x80, 0xc2, 0x34, 0x25, 0xa5, 0xda, 0xa1,
	0x12, 0x5a, 0xa2, 0x8d, 0x2b, 0x42, 0x6a, 0x56, 0x90, 0x90, 0x40, 0x42, 0x66, 0xe2, 0x80, 0x90,
	0xa6, 0xd4, 0xf1, 0x82, 0x59, 0x13, 0x8f, 0xd8, 0x1d, 0x83, 0x3b, 0x57, 0xc4, 0x89, 0xbf, 0x69,
	0xc7, 0x1d, 0x39, 0x45, 0xa8, 0xbd, 0xe5, 0x4f, 0xe0, 0x84, 0x62, 0xbb, 0x49, 0x36, 0x76, 0x68,
	0x77, 0xf1, 0x73, 0x9f, 0xdf, 0xf7, 0xdb, 0x4f, 0xfd, 0x5e, 0x0d, 0x76, 0x22, 0x8a, 0x13, 0x26,
	0x28, 0x3e, 0x71, 0xcf, 0xf6, 0x46, 0x44, 0xf8, 0x7b, 0x6e, 0xc4, 0x43, 0xf7, 0xf0, 0xfc, 0x2d,
	0x11, 0x62, 0x4c, 0x9c, 0xd3, 0x84, 0x09, 0x06, 0xef, 0x17, 0x55, 0x8e, 0xae, 0x72, 0x22, 0x1e,
	0x6e, 0xdd, 0x0b, 0x59, 0xc8, 0x64, 0x85, 0x9b, 0xef, 0x54, 0xf1, 0x96, 0x85, 0x19, 0x8f, 0x18,
	0x77, 0x47, 0x3e, 0x27, 0x85, 0x29, 0x66, 0x34, 0x56, 0xe7, 0xbd, 0xef, 0x06, 0xe8, 0xcc, 0xfd,
	0x0f, 0x13, 0x3f, 0x20, 0xf0, 0x01, 0xa8, 0xd3, 0xc0, 0x34, 0xba, 0x46, 0xbf, 0xe3, 0xb5, 0xb3,
	0xd4, 0xae, 0xd3, 0x00, 0xd5, 0x69, 0x00, 0x3f, 0x80, 0xb5, 0x84, 0x7c, 0x9e, 0x10, 0x2e, 0x48,
	0x62, 0xd6, 0xbb, 0x46, 0x7f, 0xc3, 0x7b, 0x96, 0xa5, 0x76, 0x99, 0xfc, 0x9b, 0xda, 0xbb, 0x21,
	0x15, 0x1f, 0x27, 0x23, 0x07, 0xb3, 0xc8, 0xd5, 0x5f, 0xac, 0xc2, 0x2e, 0x0f, 0x4e, 0x5c, 0xf1,
	0xf5, 0x94, 0x70, 0x67, 0x80, 0xf1, 0x20, 0x08, 0x12, 0xc2, 0x39, 0x2a, 0xb5, 0xbd, 0x5f, 0x0d,
	0xd0, 0x51, 0x14, 0xaf, 0x48, 0x38, 0xf4, 0x85, 0x0f, 0x1f, 0x81, 0xf6, 0x98, 0x84, 0x47, 0x05,
	0x0b, 0xc8, 0x52, 0x5b, 0x67, 0x50, 0x6b, 0x4c, 0xc2, 0x97, 0x01, 0xfc, 0x04, 0x36, 0xb9, 0xd4,
	0x1c, 0xf9, 0x18, 0xb3, 0x49, 0x2c, 0x34, 0xd7, 0x41, 0x96, 0xda, 0xd7, 0x4e, 0x96, 0x87, 0xeb,
	0x28, 0x83, 0x81, 0xd2, 0xc3, 0x21, 0x68, 0xab, 0x84, 0xd9, 0xe8, 0x1a, 0xfd, 0xf5, 0xfd, 0x6d,
	0x47, 0x89, 0x9d, 0xfc, 0x66, 0x8b, 0x46, 0x0c, 0x09, 0x3e, 0x60, 0x34, 0xf6, 0x36, 0x2f, 0x52,
	0xbb, 0x96, 0x03, 0x2b, 0x0d, 0xd2, 0x31, 0x27, 0x4e, 0xc8, 0xf1, 0x24, 0x0e, 0x0a, 0xe2, 0x66,
	0x49, 0x7c, 0xf5, 0xe4, 0x16, 0xc4, 0xca, 0xa0, 0x42, 0xac, 0x12, 0x66, 0x6b, 0x19, 0x62, 0xa5,
	0x41, 0x3a, 0xf6, 0x7e, 0x34, 0xc1, 0x9d, 0xca, 0x78, 0xc8, 0xd6, 0x6c, 0x83, 0xa6, 0xa0, 0x11,
	0x91, 0x8d, 0x69, 0x78, 0xab, 0x59, 0x6a, 0xcb, 0xcf, 0x48, 0xae, 0x7a, 0x80, 0xea, 0xff, 0x0d,
	0xd0, 0x00, 0xb4, 0x8e, 0x69, 0xec, 0x8f, 0x17, 0xba, 0xc0, 0x8e, 0xc6, 0x51, 0x12, 0xa4, 0x02,
	0x7c, 0x01, 0x9a, 0x63, 0x12, 0x72, 0xb3, 0xd9, 0x6d, 0xf4, 0xd7, 0xf7, 0x77, 0x9c, 0x1b, 0xff,
	0x09, 0xce, 0x95, 0x39, 0xf2, 0x36, 0xb4, 0x93, 0x54, 0x22, 0xb9, 0xc2, 0xd7, 0x60, 0x8d, 0xc6,
	0x98, 0xc4, 0x82, 0x9e, 0x91, 0x85, 0x6e, 0xe7, 0xae, 0x36, 0x29, 0x65, 0xa8, 0xdc, 0xc2, 0x77,
	0x60, 0x45, 0xf5, 0x37, 0x31, 0xdb, 0xb2, 0x9d, 0x4f, 0xb3, 0xd4, 0x9e, 0xa7, 0x96, 0xef, 0xe3,
	0x5c, 0x09, 0xdf, 0x00, 0x80, 0x59, 0x14, 0x51, 0xce, 0x29, 0x8b, 0xcd, 0x95, 0x05, 0x38, 0xa1,
	0xe6, 0xac, 0xe8, 0x50, 0x65, 0x0f, 0x07, 0xf9, 0x4c, 0x7c, 0xf1, 0x93, 0xc0, 0x5c, 0x95, 0x6e,
	0x0f, 0x6f, 0x74, 0xbb, 0x3e, 0x10, 0xb9, 0x00, 0xe9, 0xe8, 0x3d, 0xbf, 0x98, 0x5a, 0xc6, 0xe5,
	0xd4, 0x32, 0xfe, 0x4c, 0x2d, 0xe3, 0xe7, 0xcc, 0xaa, 0x5d, 0xce, 0xac, 0xda, 0xef, 0x99, 0x55,
	0x7b, 0xff, 0xb8, 0xf2, 0x33, 0xcb, 0x97, 0x2c, 0x12, 0xdf, 0x58, 0x4c, 0xdc, 0xf3, 0x6a, 0x8a,
	0x87, 0xa3, 0xb6, 0x7c, 0x7f, 0x9e, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x17, 0x59, 0x9c, 0xa8,
	0xf4, 0x04, 0x00, 0x00,
}

func (m *TxSettleTrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxSettleTrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxSettleTrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintTxSettle(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTxSettle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SettleLegData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleLegData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettleLegData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Refund.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxSettle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.RefundAccount) > 0 {
		i -= len(m.RefundAccount)
		copy(dAtA[i:], m.RefundAccount)
		i = encodeVarintTxSettle(dAtA, i, uint64(len(m.RefundAccount)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Settle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxSettle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SettleAccount) > 0 {
		i -= len(m.SettleAccount)
		copy(dAtA[i:], m.SettleAccount)
		i = encodeVarintTxSettle(dAtA, i, uint64(len(m.SettleAccount)))
		i--
		dAtA[i] = 0x12
	}
	if m.LegId != 0 {
		i = encodeVarintTxSettle(dAtA, i, uint64(m.LegId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SettleTradeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleTradeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettleTradeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxSettle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxSettle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Settler) > 0 {
		i -= len(m.Settler)
		copy(dAtA[i:], m.Settler)
		i = encodeVarintTxSettle(dAtA, i, uint64(len(m.Settler)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Incentive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxSettle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Legs) > 0 {
		for iNdEx := len(m.Legs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Legs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxSettle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.Final.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxSettle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Id != 0 {
		i = encodeVarintTxSettle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintTxSettle(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxSettle(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxSettle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxSettleTrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTxSettle(uint64(m.Id))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovTxSettle(uint64(l))
	}
	return n
}

func (m *SettleLegData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LegId != 0 {
		n += 1 + sovTxSettle(uint64(m.LegId))
	}
	l = len(m.SettleAccount)
	if l > 0 {
		n += 1 + l + sovTxSettle(uint64(l))
	}
	l = m.Settle.Size()
	n += 1 + l + sovTxSettle(uint64(l))
	l = len(m.RefundAccount)
	if l > 0 {
		n += 1 + l + sovTxSettle(uint64(l))
	}
	l = m.Refund.Size()
	n += 1 + l + sovTxSettle(uint64(l))
	return n
}

func (m *SettleTradeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTxSettle(uint64(m.Time))
	}
	if m.Id != 0 {
		n += 1 + sovTxSettle(uint64(m.Id))
	}
	l = m.Final.Size()
	n += 1 + l + sovTxSettle(uint64(l))
	if len(m.Legs) > 0 {
		for _, e := range m.Legs {
			l = e.Size()
			n += 1 + l + sovTxSettle(uint64(l))
		}
	}
	l = m.Incentive.Size()
	n += 1 + l + sovTxSettle(uint64(l))
	l = len(m.Settler)
	if l > 0 {
		n += 1 + l + sovTxSettle(uint64(l))
	}
	l = m.Commission.Size()
	n += 1 + l + sovTxSettle(uint64(l))
	l = m.Reward.Size()
	n += 1 + l + sovTxSettle(uint64(l))
	return n
}

func sovTxSettle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxSettle(x uint64) (n int) {
	return sovTxSettle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxSettleTrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxSettle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxSettleTrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxSettleTrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = append(m.Requester[:0], dAtA[iNdEx:postIndex]...)
			if m.Requester == nil {
				m.Requester = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxSettle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxSettle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettleLegData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxSettle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleLegData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleLegData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegId", wireType)
			}
			m.LegId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LegId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettleAccount = append(m.SettleAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.SettleAccount == nil {
				m.SettleAccount = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAccount = append(m.RefundAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.RefundAccount == nil {
				m.RefundAccount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Refund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxSettle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxSettle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettleTradeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxSettle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleTradeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleTradeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Final.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Legs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Legs = append(m.Legs, SettleLegData{})
			if err := m.Legs[len(m.Legs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incentive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Incentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settler", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settler = append(m.Settler[:0], dAtA[iNdEx:postIndex]...)
			if m.Settler == nil {
				m.Settler = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxSettle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxSettle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxSettle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxSettle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxSettle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxSettle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxSettle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxSettle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxSettle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxSettle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxSettle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxSettle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxSettle = fmt.Errorf("proto: unexpected end of group")
)
