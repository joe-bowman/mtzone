// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/TxTrade.proto

package msg

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	keeper "github.com/microtick/mtzone/x/microtick/keeper"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxMarketTrade struct {
	Market    string                                        `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
	Duration  string                                        `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration"`
	Taker     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=taker,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"taker"`
	OrderType string                                        `protobuf:"bytes,4,opt,name=order_type,json=orderType,proto3" json:"order_type"`
	Quantity  string                                        `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity"`
}

func (m *TxMarketTrade) Reset()         { *m = TxMarketTrade{} }
func (m *TxMarketTrade) String() string { return proto.CompactTextString(m) }
func (*TxMarketTrade) ProtoMessage()    {}
func (*TxMarketTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e0ec07f7986371, []int{0}
}
func (m *TxMarketTrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxMarketTrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxMarketTrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxMarketTrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxMarketTrade.Merge(m, src)
}
func (m *TxMarketTrade) XXX_Size() int {
	return m.Size()
}
func (m *TxMarketTrade) XXX_DiscardUnknown() {
	xxx_messageInfo_TxMarketTrade.DiscardUnknown(m)
}

var xxx_messageInfo_TxMarketTrade proto.InternalMessageInfo

func (m *TxMarketTrade) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *TxMarketTrade) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *TxMarketTrade) GetTaker() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Taker
	}
	return nil
}

func (m *TxMarketTrade) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *TxMarketTrade) GetQuantity() string {
	if m != nil {
		return m.Quantity
	}
	return ""
}

type MarketTradeData struct {
	Time       int64                  `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	Trade      keeper.DataActiveTrade `protobuf:"bytes,2,opt,name=trade,proto3" json:"trade"`
	Consensus  types.DecCoin          `protobuf:"bytes,3,opt,name=consensus,proto3" json:"consensus"`
	Commission types.DecCoin          `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission"`
	Reward     types.Coin             `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward"`
}

func (m *MarketTradeData) Reset()         { *m = MarketTradeData{} }
func (m *MarketTradeData) String() string { return proto.CompactTextString(m) }
func (*MarketTradeData) ProtoMessage()    {}
func (*MarketTradeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e0ec07f7986371, []int{1}
}
func (m *MarketTradeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketTradeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketTradeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketTradeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketTradeData.Merge(m, src)
}
func (m *MarketTradeData) XXX_Size() int {
	return m.Size()
}
func (m *MarketTradeData) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketTradeData.DiscardUnknown(m)
}

var xxx_messageInfo_MarketTradeData proto.InternalMessageInfo

func (m *MarketTradeData) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MarketTradeData) GetTrade() keeper.DataActiveTrade {
	if m != nil {
		return m.Trade
	}
	return keeper.DataActiveTrade{}
}

func (m *MarketTradeData) GetConsensus() types.DecCoin {
	if m != nil {
		return m.Consensus
	}
	return types.DecCoin{}
}

func (m *MarketTradeData) GetCommission() types.DecCoin {
	if m != nil {
		return m.Commission
	}
	return types.DecCoin{}
}

func (m *MarketTradeData) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*TxMarketTrade)(nil), "microtick.v1beta1.msg.TxMarketTrade")
	proto.RegisterType((*MarketTradeData)(nil), "microtick.v1beta1.msg.MarketTradeData")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/msg/TxTrade.proto", fileDescriptor_c1e0ec07f7986371)
}

var fileDescriptor_c1e0ec07f7986371 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6f, 0xd3, 0x3e,
	0x18, 0x6d, 0xba, 0xb6, 0x5a, 0xdd, 0x6d, 0x3f, 0xfd, 0x2c, 0x90, 0xca, 0x34, 0x25, 0xa3, 0x5c,
	0x2a, 0xa1, 0x3a, 0x5a, 0xb9, 0x71, 0x6b, 0x18, 0xdc, 0x26, 0x4d, 0x56, 0x4f, 0x5c, 0x90, 0xeb,
	0x58, 0xc1, 0x8a, 0x1c, 0x17, 0xdb, 0x1d, 0x2d, 0x7f, 0x01, 0x47, 0xfe, 0xac, 0x1d, 0x77, 0x44,
	0x42, 0x8a, 0x50, 0x7b, 0xcb, 0x9f, 0xc0, 0x09, 0xc5, 0x31, 0x49, 0x04, 0x1c, 0xb8, 0xf4, 0x7b,
	0x7e, 0x7d, 0xdf, 0xfb, 0x9c, 0xe7, 0x0f, 0x3c, 0x13, 0x9c, 0x2a, 0x69, 0x38, 0x4d, 0xc3, 0xbb,
	0xab, 0x15, 0x33, 0xe4, 0x2a, 0x14, 0x3a, 0x09, 0x97, 0xdb, 0xa5, 0x22, 0x31, 0x43, 0x6b, 0x25,
	0x8d, 0x84, 0x8f, 0x6b, 0x11, 0x72, 0x22, 0x24, 0x74, 0x72, 0xfe, 0x28, 0x91, 0x89, 0xb4, 0x8a,
	0xb0, 0x44, 0x95, 0xf8, 0xdc, 0xa7, 0x52, 0x0b, 0xa9, 0xc3, 0x15, 0xd1, 0xac, 0xf6, 0xa4, 0x92,
	0x67, 0xee, 0x7f, 0xf4, 0xe7, 0xc4, 0x94, 0xb1, 0x35, 0x53, 0xe1, 0x35, 0x31, 0x64, 0x41, 0x0d,
	0xbf, 0x63, 0xad, 0xe1, 0x93, 0xcf, 0x5d, 0x70, 0xba, 0xdc, 0xde, 0x10, 0x95, 0x32, 0x63, 0x79,
	0x38, 0x01, 0x03, 0x61, 0x8f, 0x63, 0xef, 0xd2, 0x9b, 0x0e, 0x23, 0x50, 0xe4, 0x81, 0x63, 0xb0,
	0xab, 0x70, 0x0a, 0x8e, 0xe3, 0x8d, 0x22, 0x86, 0xcb, 0x6c, 0xdc, 0xb5, 0xaa, 0x93, 0x22, 0x0f,
	0x6a, 0x0e, 0xd7, 0x08, 0xde, 0x82, 0xbe, 0x21, 0x29, 0x53, 0xe3, 0xa3, 0x4b, 0x6f, 0x7a, 0x12,
	0xbd, 0x2c, 0xf2, 0xa0, 0x22, 0x7e, 0xe4, 0xc1, 0x2c, 0xe1, 0xe6, 0xfd, 0x66, 0x85, 0xa8, 0x14,
	0xa1, 0xfb, 0xac, 0xaa, 0xcc, 0x74, 0x9c, 0x86, 0x66, 0xb7, 0x66, 0x1a, 0x2d, 0x28, 0x5d, 0xc4,
	0xb1, 0x62, 0x5a, 0xe3, 0xaa, 0x0f, 0xce, 0x00, 0x90, 0x2a, 0x66, 0xea, 0x5d, 0x29, 0x18, 0xf7,
	0xec, 0xf4, 0xb3, 0x22, 0x0f, 0x5a, 0x2c, 0x1e, 0x5a, 0xbc, 0xdc, 0xad, 0x59, 0x79, 0xd5, 0x0f,
	0x1b, 0x92, 0x19, 0x6e, 0x76, 0xe3, 0x7e, 0x73, 0xd5, 0x5f, 0x1c, 0xae, 0xd1, 0xe4, 0x5b, 0x17,
	0xfc, 0xd7, 0x0a, 0xa2, 0xcc, 0x0b, 0x5e, 0x80, 0x9e, 0xe1, 0x82, 0xd9, 0x28, 0x8e, 0xa2, 0xe3,
	0x22, 0x0f, 0xec, 0x19, 0xdb, 0x5f, 0xf8, 0x06, 0xf4, 0x4d, 0x29, 0xb5, 0x19, 0x8c, 0xe6, 0x4f,
	0x9b, 0xf0, 0x51, 0x15, 0x3a, 0xfa, 0x2d, 0xf4, 0xe8, 0xf4, 0x3e, 0x0f, 0x3a, 0x36, 0x83, 0xf2,
	0x88, 0xab, 0x02, 0x6f, 0xc0, 0x90, 0xca, 0x4c, 0xb3, 0x4c, 0x6f, 0xb4, 0x0d, 0x6a, 0x34, 0xbf,
	0x40, 0x55, 0x14, 0xa8, 0x7c, 0xe8, 0x7a, 0x2f, 0xae, 0x19, 0x7d, 0x25, 0x79, 0x16, 0xfd, 0xef,
	0x6c, 0x9a, 0x36, 0xdc, 0x40, 0x78, 0x0b, 0x00, 0x95, 0x42, 0x70, 0xad, 0xcb, 0xf7, 0xe9, 0xfd,
	0x83, 0x1f, 0x74, 0x7e, 0xad, 0x3e, 0xdc, 0xc2, 0x70, 0x01, 0x06, 0x8a, 0x7d, 0x24, 0x2a, 0xb6,
	0x11, 0x8e, 0xe6, 0x4f, 0xfe, 0xea, 0x66, 0xad, 0xce, 0x9c, 0x95, 0x6b, 0xc0, 0xae, 0x46, 0xaf,
	0xef, 0xf7, 0xbe, 0xf7, 0xb0, 0xf7, 0xbd, 0xef, 0x7b, 0xdf, 0xfb, 0x72, 0xf0, 0x3b, 0x0f, 0x07,
	0xbf, 0xf3, 0xf5, 0xe0, 0x77, 0xde, 0x3e, 0x6f, 0xad, 0x41, 0xb3, 0xbd, 0xc2, 0x7c, 0x92, 0x19,
	0x0b, 0xb7, 0x6d, 0x4a, 0x27, 0xab, 0x81, 0x5d, 0xdb, 0x17, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x51, 0xeb, 0xca, 0xef, 0x5a, 0x03, 0x00, 0x00,
}

func (m *TxMarketTrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxMarketTrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxMarketTrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Quantity) > 0 {
		i -= len(m.Quantity)
		copy(dAtA[i:], m.Quantity)
		i = encodeVarintTxTrade(dAtA, i, uint64(len(m.Quantity)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrderType) > 0 {
		i -= len(m.OrderType)
		copy(dAtA[i:], m.OrderType)
		i = encodeVarintTxTrade(dAtA, i, uint64(len(m.OrderType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Taker) > 0 {
		i -= len(m.Taker)
		copy(dAtA[i:], m.Taker)
		i = encodeVarintTxTrade(dAtA, i, uint64(len(m.Taker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTxTrade(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Market) > 0 {
		i -= len(m.Market)
		copy(dAtA[i:], m.Market)
		i = encodeVarintTxTrade(dAtA, i, uint64(len(m.Market)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketTradeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketTradeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketTradeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Consensus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Trade.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Time != 0 {
		i = encodeVarintTxTrade(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxTrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxTrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxMarketTrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Market)
	if l > 0 {
		n += 1 + l + sovTxTrade(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTxTrade(uint64(l))
	}
	l = len(m.Taker)
	if l > 0 {
		n += 1 + l + sovTxTrade(uint64(l))
	}
	l = len(m.OrderType)
	if l > 0 {
		n += 1 + l + sovTxTrade(uint64(l))
	}
	l = len(m.Quantity)
	if l > 0 {
		n += 1 + l + sovTxTrade(uint64(l))
	}
	return n
}

func (m *MarketTradeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTxTrade(uint64(m.Time))
	}
	l = m.Trade.Size()
	n += 1 + l + sovTxTrade(uint64(l))
	l = m.Consensus.Size()
	n += 1 + l + sovTxTrade(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovTxTrade(uint64(l))
	l = m.Reward.Size()
	n += 1 + l + sovTxTrade(uint64(l))
	return n
}

func sovTxTrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxTrade(x uint64) (n int) {
	return sovTxTrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxMarketTrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxMarketTrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxMarketTrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTrade
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taker = append(m.Taker[:0], dAtA[iNdEx:postIndex]...)
			if m.Taker == nil {
				m.Taker = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quantity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketTradeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketTradeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketTradeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Trade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxTrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxTrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxTrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxTrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxTrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxTrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxTrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxTrade = fmt.Errorf("proto: unexpected end of group")
)
