// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/QueryAccount.proto

package msg

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAccountRequest struct {
	Account github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=account,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"account"`
	Offset  uint32                                        `protobuf:"varint,2,opt,name=offset,proto3" json:"offset"`
	Limit   uint32                                        `protobuf:"varint,3,opt,name=limit,proto3" json:"limit"`
}

func (m *QueryAccountRequest) Reset()         { *m = QueryAccountRequest{} }
func (m *QueryAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountRequest) ProtoMessage()    {}
func (*QueryAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a7bc610cc6c12a1, []int{0}
}
func (m *QueryAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountRequest.Merge(m, src)
}
func (m *QueryAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountRequest proto.InternalMessageInfo

func (m *QueryAccountRequest) GetAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *QueryAccountRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *QueryAccountRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryAccountResponse struct {
	Account           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=account,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"account"`
	Balances          []types.DecCoin                               `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances"`
	PlacedQuotes      uint32                                        `protobuf:"varint,3,opt,name=placed_quotes,json=placedQuotes,proto3" json:"placed_quotes"`
	PlacedTrades      uint32                                        `protobuf:"varint,4,opt,name=placed_trades,json=placedTrades,proto3" json:"placed_trades"`
	Offset            uint32                                        `protobuf:"varint,5,opt,name=offset,proto3" json:"offset"`
	Limit             uint32                                        `protobuf:"varint,6,opt,name=limit,proto3" json:"limit"`
	TotalActiveQuotes uint32                                        `protobuf:"varint,7,opt,name=total_active_quotes,json=totalActiveQuotes,proto3" json:"total_active_quotes"`
	ActiveQuotes      []uint32                                      `protobuf:"varint,8,rep,packed,name=active_quotes,json=activeQuotes,proto3" json:"active_quotes"`
	TotalActiveTrades uint32                                        `protobuf:"varint,9,opt,name=total_active_trades,json=totalActiveTrades,proto3" json:"total_active_trades"`
	ActiveTrades      []uint32                                      `protobuf:"varint,10,rep,packed,name=active_trades,json=activeTrades,proto3" json:"active_trades"`
	QuoteBacking      types.DecCoin                                 `protobuf:"bytes,11,opt,name=quote_backing,json=quoteBacking,proto3" json:"quote_backing"`
	TradeBacking      types.DecCoin                                 `protobuf:"bytes,12,opt,name=trade_backing,json=tradeBacking,proto3" json:"trade_backing"`
	SettleBacking     types.DecCoin                                 `protobuf:"bytes,13,opt,name=settle_backing,json=settleBacking,proto3" json:"settle_backing"`
}

func (m *QueryAccountResponse) Reset()         { *m = QueryAccountResponse{} }
func (m *QueryAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountResponse) ProtoMessage()    {}
func (*QueryAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a7bc610cc6c12a1, []int{1}
}
func (m *QueryAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountResponse.Merge(m, src)
}
func (m *QueryAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountResponse proto.InternalMessageInfo

func (m *QueryAccountResponse) GetAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *QueryAccountResponse) GetBalances() []types.DecCoin {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *QueryAccountResponse) GetPlacedQuotes() uint32 {
	if m != nil {
		return m.PlacedQuotes
	}
	return 0
}

func (m *QueryAccountResponse) GetPlacedTrades() uint32 {
	if m != nil {
		return m.PlacedTrades
	}
	return 0
}

func (m *QueryAccountResponse) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *QueryAccountResponse) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryAccountResponse) GetTotalActiveQuotes() uint32 {
	if m != nil {
		return m.TotalActiveQuotes
	}
	return 0
}

func (m *QueryAccountResponse) GetActiveQuotes() []uint32 {
	if m != nil {
		return m.ActiveQuotes
	}
	return nil
}

func (m *QueryAccountResponse) GetTotalActiveTrades() uint32 {
	if m != nil {
		return m.TotalActiveTrades
	}
	return 0
}

func (m *QueryAccountResponse) GetActiveTrades() []uint32 {
	if m != nil {
		return m.ActiveTrades
	}
	return nil
}

func (m *QueryAccountResponse) GetQuoteBacking() types.DecCoin {
	if m != nil {
		return m.QuoteBacking
	}
	return types.DecCoin{}
}

func (m *QueryAccountResponse) GetTradeBacking() types.DecCoin {
	if m != nil {
		return m.TradeBacking
	}
	return types.DecCoin{}
}

func (m *QueryAccountResponse) GetSettleBacking() types.DecCoin {
	if m != nil {
		return m.SettleBacking
	}
	return types.DecCoin{}
}

func init() {
	proto.RegisterType((*QueryAccountRequest)(nil), "microtick.v1beta1.msg.QueryAccountRequest")
	proto.RegisterType((*QueryAccountResponse)(nil), "microtick.v1beta1.msg.QueryAccountResponse")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/msg/QueryAccount.proto", fileDescriptor_6a7bc610cc6c12a1)
}

var fileDescriptor_6a7bc610cc6c12a1 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x41, 0x6f, 0xd3, 0x3e,
	0x1c, 0x6d, 0xd6, 0xff, 0xda, 0xcd, 0x4b, 0xff, 0x62, 0xd9, 0x06, 0xd1, 0x84, 0x92, 0xaa, 0xa7,
	0x4a, 0x68, 0x89, 0x06, 0x12, 0x27, 0x2e, 0x0d, 0x20, 0x24, 0x6e, 0xb3, 0x10, 0x42, 0x70, 0xa8,
	0x1c, 0xc7, 0x0b, 0x51, 0x93, 0xb8, 0x8b, 0x9d, 0x89, 0x71, 0xe4, 0x13, 0xf0, 0x59, 0xf8, 0x14,
	0x3b, 0xee, 0xc8, 0x29, 0x42, 0xed, 0x2d, 0x1f, 0x81, 0x13, 0xaa, 0xed, 0xa4, 0xc9, 0x36, 0x34,
	0x38, 0x70, 0x72, 0x7e, 0xef, 0xf7, 0x7b, 0xcf, 0xcf, 0xaf, 0xae, 0xc1, 0x38, 0x89, 0x70, 0x46,
	0x79, 0x84, 0x67, 0xee, 0xf9, 0xb1, 0x4f, 0x38, 0x3a, 0x76, 0x13, 0x16, 0xba, 0x27, 0x39, 0xc9,
	0x2e, 0x26, 0x18, 0xd3, 0x3c, 0xe5, 0xce, 0x3c, 0xa3, 0x9c, 0x1a, 0x07, 0xf5, 0xa4, 0xa3, 0x26,
	0x9d, 0x84, 0x85, 0x87, 0xfb, 0x21, 0x0d, 0xa9, 0x98, 0x70, 0x57, 0x5f, 0x72, 0xf8, 0xd0, 0xc2,
	0x94, 0x25, 0x94, 0xb9, 0x3e, 0x62, 0xa4, 0x16, 0xc6, 0x34, 0x4a, 0x65, 0x7f, 0xf4, 0x4d, 0x03,
	0x7b, 0xcd, 0x3d, 0x20, 0x39, 0xcb, 0x09, 0xe3, 0xc6, 0x5b, 0xd0, 0x47, 0x12, 0x31, 0xb5, 0xa1,
	0x36, 0xd6, 0xbd, 0x67, 0x65, 0x61, 0x57, 0xd0, 0xcf, 0xc2, 0x3e, 0x0a, 0x23, 0xfe, 0x31, 0xf7,
	0x1d, 0x4c, 0x13, 0x57, 0x6d, 0x21, 0x97, 0x23, 0x16, 0xcc, 0x5c, 0x7e, 0x31, 0x27, 0xcc, 0x99,
	0x60, 0x3c, 0x09, 0x82, 0x8c, 0x30, 0x06, 0x2b, 0xa6, 0x31, 0x02, 0x3d, 0x7a, 0x7a, 0xca, 0x08,
	0x37, 0x37, 0x86, 0xda, 0x78, 0xe0, 0x81, 0xb2, 0xb0, 0x15, 0x02, 0xd5, 0x6a, 0xd8, 0x60, 0x33,
	0x8e, 0x92, 0x88, 0x9b, 0x5d, 0x31, 0xb2, 0x5d, 0x16, 0xb6, 0x04, 0xa0, 0x5c, 0x46, 0x5f, 0xfa,
	0x60, 0xbf, 0x6d, 0x9a, 0xcd, 0x69, 0xca, 0xc8, 0x3f, 0x73, 0xfd, 0x1a, 0x6c, 0xf9, 0x28, 0x46,
	0x29, 0x26, 0xcc, 0xdc, 0x18, 0x76, 0xc7, 0x3b, 0x8f, 0x1f, 0x3a, 0x92, 0xe8, 0xac, 0x82, 0xad,
	0x7f, 0x87, 0x17, 0x04, 0x3f, 0xa7, 0x51, 0xea, 0xdd, 0xbb, 0x2c, 0xec, 0x4e, 0x59, 0xd8, 0x35,
	0x0b, 0xd6, 0x5f, 0xc6, 0x53, 0x30, 0x98, 0xc7, 0x08, 0x93, 0x60, 0x7a, 0x96, 0x53, 0x4e, 0x98,
	0x3a, 0xe5, 0x6e, 0x59, 0xd8, 0xed, 0x06, 0xd4, 0x65, 0x79, 0x22, 0xaa, 0x06, 0x8f, 0x67, 0x28,
	0x20, 0xcc, 0xfc, 0xef, 0x06, 0x4f, 0x36, 0x2a, 0xde, 0x1b, 0x51, 0x35, 0x12, 0xdf, 0xbc, 0x3b,
	0xf1, 0xde, 0xed, 0x89, 0x1b, 0xaf, 0xc0, 0x1e, 0xa7, 0x1c, 0xc5, 0x53, 0x84, 0x79, 0x74, 0x4e,
	0x2a, 0xeb, 0x7d, 0x31, 0xfe, 0xa0, 0x2c, 0xec, 0xdb, 0xda, 0x70, 0x57, 0x80, 0x13, 0x81, 0xad,
	0x4f, 0xd1, 0x96, 0xd8, 0x1a, 0x76, 0xab, 0x53, 0xb4, 0xc9, 0x3a, 0x6a, 0xf2, 0xae, 0x1b, 0x50,
	0x19, 0x6c, 0xff, 0xc6, 0x80, 0x4a, 0xa2, 0x69, 0x40, 0xc5, 0xb1, 0x36, 0xa0, 0x24, 0xc0, 0x0d,
	0x03, 0x55, 0x8c, 0xa8, 0xc9, 0x7b, 0x07, 0x06, 0xc2, 0xd8, 0xd4, 0x47, 0x78, 0x16, 0xa5, 0xa1,
	0xb9, 0x33, 0xd4, 0xee, 0xbc, 0x07, 0x07, 0xea, 0x1e, 0xb4, 0xa9, 0x50, 0x17, 0xa5, 0x27, 0xab,
	0x95, 0xb2, 0xd8, 0xb1, 0x56, 0xd6, 0xff, 0x46, 0xb9, 0x45, 0x85, 0xba, 0x28, 0x2b, 0xe5, 0x0f,
	0xe0, 0x7f, 0x46, 0x38, 0x8f, 0xd7, 0xd2, 0x83, 0x3f, 0x90, 0xbe, 0xaf, 0xa4, 0xaf, 0x71, 0xe1,
	0x40, 0xd6, 0x4a, 0xdc, 0x7b, 0x79, 0xb9, 0xb0, 0xb4, 0xab, 0x85, 0xa5, 0xfd, 0x58, 0x58, 0xda,
	0xd7, 0xa5, 0xd5, 0xb9, 0x5a, 0x5a, 0x9d, 0xef, 0x4b, 0xab, 0xf3, 0xfe, 0x51, 0xe3, 0x5f, 0xb6,
	0x7e, 0xd5, 0x12, 0xfe, 0x99, 0xa6, 0xc4, 0xfd, 0xd4, 0x84, 0x58, 0xe8, 0xf7, 0xc4, 0x3b, 0xf4,
	0xe4, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x25, 0xc4, 0x88, 0x00, 0x05, 0x00, 0x00,
}

func (m *QueryAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQueryAccount(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintQueryAccount(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQueryAccount(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SettleBacking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.TradeBacking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.QuoteBacking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.ActiveTrades) > 0 {
		dAtA5 := make([]byte, len(m.ActiveTrades)*10)
		var j4 int
		for _, num := range m.ActiveTrades {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintQueryAccount(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x52
	}
	if m.TotalActiveTrades != 0 {
		i = encodeVarintQueryAccount(dAtA, i, uint64(m.TotalActiveTrades))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ActiveQuotes) > 0 {
		dAtA7 := make([]byte, len(m.ActiveQuotes)*10)
		var j6 int
		for _, num := range m.ActiveQuotes {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintQueryAccount(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x42
	}
	if m.TotalActiveQuotes != 0 {
		i = encodeVarintQueryAccount(dAtA, i, uint64(m.TotalActiveQuotes))
		i--
		dAtA[i] = 0x38
	}
	if m.Limit != 0 {
		i = encodeVarintQueryAccount(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if m.Offset != 0 {
		i = encodeVarintQueryAccount(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x28
	}
	if m.PlacedTrades != 0 {
		i = encodeVarintQueryAccount(dAtA, i, uint64(m.PlacedTrades))
		i--
		dAtA[i] = 0x20
	}
	if m.PlacedQuotes != 0 {
		i = encodeVarintQueryAccount(dAtA, i, uint64(m.PlacedQuotes))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQueryAccount(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQueryAccount(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovQueryAccount(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovQueryAccount(uint64(m.Limit))
	}
	return n
}

func (m *QueryAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQueryAccount(uint64(l))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQueryAccount(uint64(l))
		}
	}
	if m.PlacedQuotes != 0 {
		n += 1 + sovQueryAccount(uint64(m.PlacedQuotes))
	}
	if m.PlacedTrades != 0 {
		n += 1 + sovQueryAccount(uint64(m.PlacedTrades))
	}
	if m.Offset != 0 {
		n += 1 + sovQueryAccount(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovQueryAccount(uint64(m.Limit))
	}
	if m.TotalActiveQuotes != 0 {
		n += 1 + sovQueryAccount(uint64(m.TotalActiveQuotes))
	}
	if len(m.ActiveQuotes) > 0 {
		l = 0
		for _, e := range m.ActiveQuotes {
			l += sovQueryAccount(uint64(e))
		}
		n += 1 + sovQueryAccount(uint64(l)) + l
	}
	if m.TotalActiveTrades != 0 {
		n += 1 + sovQueryAccount(uint64(m.TotalActiveTrades))
	}
	if len(m.ActiveTrades) > 0 {
		l = 0
		for _, e := range m.ActiveTrades {
			l += sovQueryAccount(uint64(e))
		}
		n += 1 + sovQueryAccount(uint64(l)) + l
	}
	l = m.QuoteBacking.Size()
	n += 1 + l + sovQueryAccount(uint64(l))
	l = m.TradeBacking.Size()
	n += 1 + l + sovQueryAccount(uint64(l))
	l = m.SettleBacking.Size()
	n += 1 + l + sovQueryAccount(uint64(l))
	return n
}

func sovQueryAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryAccount(x uint64) (n int) {
	return sovQueryAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, types.DecCoin{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacedQuotes", wireType)
			}
			m.PlacedQuotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlacedQuotes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacedTrades", wireType)
			}
			m.PlacedTrades = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlacedTrades |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActiveQuotes", wireType)
			}
			m.TotalActiveQuotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalActiveQuotes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueryAccount
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveQuotes = append(m.ActiveQuotes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueryAccount
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQueryAccount
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQueryAccount
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActiveQuotes) == 0 {
					m.ActiveQuotes = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQueryAccount
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveQuotes = append(m.ActiveQuotes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveQuotes", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActiveTrades", wireType)
			}
			m.TotalActiveTrades = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalActiveTrades |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueryAccount
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveTrades = append(m.ActiveTrades, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueryAccount
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQueryAccount
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQueryAccount
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActiveTrades) == 0 {
					m.ActiveTrades = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQueryAccount
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveTrades = append(m.ActiveTrades, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTrades", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteBacking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuoteBacking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeBacking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradeBacking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleBacking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettleBacking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryAccount = fmt.Errorf("proto: unexpected end of group")
)
