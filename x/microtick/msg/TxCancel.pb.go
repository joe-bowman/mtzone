// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/TxCancel.proto

package msg

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxCancelQuote struct {
	Id        uint32                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Requester github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=requester,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"requester"`
}

func (m *TxCancelQuote) Reset()         { *m = TxCancelQuote{} }
func (m *TxCancelQuote) String() string { return proto.CompactTextString(m) }
func (*TxCancelQuote) ProtoMessage()    {}
func (*TxCancelQuote) Descriptor() ([]byte, []int) {
	return fileDescriptor_b44dd51e6c975aab, []int{0}
}
func (m *TxCancelQuote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxCancelQuote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxCancelQuote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxCancelQuote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxCancelQuote.Merge(m, src)
}
func (m *TxCancelQuote) XXX_Size() int {
	return m.Size()
}
func (m *TxCancelQuote) XXX_DiscardUnknown() {
	xxx_messageInfo_TxCancelQuote.DiscardUnknown(m)
}

var xxx_messageInfo_TxCancelQuote proto.InternalMessageInfo

func (m *TxCancelQuote) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TxCancelQuote) GetRequester() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Requester
	}
	return nil
}

type CancelQuoteData struct {
	Time       int64                                         `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	Account    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=account,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"account"`
	Market     string                                        `protobuf:"bytes,3,opt,name=market,proto3" json:"market"`
	Duration   string                                        `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration"`
	Consensus  types.DecCoin                                 `protobuf:"bytes,5,opt,name=consensus,proto3" json:"consensus"`
	Refund     types.DecCoin                                 `protobuf:"bytes,6,opt,name=refund,proto3" json:"refund"`
	Slash      types.DecCoin                                 `protobuf:"bytes,7,opt,name=slash,proto3" json:"slash"`
	Commission types.DecCoin                                 `protobuf:"bytes,8,opt,name=commission,proto3" json:"commission"`
}

func (m *CancelQuoteData) Reset()         { *m = CancelQuoteData{} }
func (m *CancelQuoteData) String() string { return proto.CompactTextString(m) }
func (*CancelQuoteData) ProtoMessage()    {}
func (*CancelQuoteData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b44dd51e6c975aab, []int{1}
}
func (m *CancelQuoteData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelQuoteData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelQuoteData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelQuoteData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelQuoteData.Merge(m, src)
}
func (m *CancelQuoteData) XXX_Size() int {
	return m.Size()
}
func (m *CancelQuoteData) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelQuoteData.DiscardUnknown(m)
}

var xxx_messageInfo_CancelQuoteData proto.InternalMessageInfo

func (m *CancelQuoteData) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CancelQuoteData) GetAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *CancelQuoteData) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *CancelQuoteData) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *CancelQuoteData) GetConsensus() types.DecCoin {
	if m != nil {
		return m.Consensus
	}
	return types.DecCoin{}
}

func (m *CancelQuoteData) GetRefund() types.DecCoin {
	if m != nil {
		return m.Refund
	}
	return types.DecCoin{}
}

func (m *CancelQuoteData) GetSlash() types.DecCoin {
	if m != nil {
		return m.Slash
	}
	return types.DecCoin{}
}

func (m *CancelQuoteData) GetCommission() types.DecCoin {
	if m != nil {
		return m.Commission
	}
	return types.DecCoin{}
}

func init() {
	proto.RegisterType((*TxCancelQuote)(nil), "microtick.v1beta1.msg.TxCancelQuote")
	proto.RegisterType((*CancelQuoteData)(nil), "microtick.v1beta1.msg.CancelQuoteData")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/msg/TxCancel.proto", fileDescriptor_b44dd51e6c975aab)
}

var fileDescriptor_b44dd51e6c975aab = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x31, 0x6f, 0xd3, 0x40,
	0x18, 0x8d, 0x93, 0xd6, 0x4d, 0x8e, 0x06, 0xc4, 0x09, 0x90, 0x55, 0x55, 0x76, 0x14, 0x31, 0x58,
	0x42, 0xb5, 0x55, 0x58, 0x11, 0x52, 0xdc, 0x30, 0x22, 0xc1, 0x09, 0x31, 0x20, 0x96, 0xcb, 0xf9,
	0x70, 0x4f, 0xe9, 0xdd, 0x15, 0x7f, 0x67, 0x54, 0xd8, 0xd9, 0xf9, 0x59, 0x1d, 0x3b, 0x32, 0x59,
	0x28, 0xd9, 0xfc, 0x13, 0x58, 0x40, 0xb1, 0x2f, 0x8e, 0xc7, 0xb0, 0xf8, 0x7b, 0x7e, 0x7e, 0xef,
	0xf9, 0xe9, 0x3e, 0x1b, 0x3d, 0x95, 0x82, 0xe5, 0xda, 0x08, 0xb6, 0x8c, 0xbf, 0x9e, 0x2f, 0xb8,
	0xa1, 0xe7, 0xb1, 0x84, 0x2c, 0x7e, 0x7f, 0x73, 0x41, 0x15, 0xe3, 0x57, 0xd1, 0x75, 0xae, 0x8d,
	0xc6, 0x8f, 0x5b, 0x55, 0x64, 0x55, 0x91, 0x84, 0xec, 0xe4, 0x51, 0xa6, 0x33, 0x5d, 0x2b, 0xe2,
	0x0d, 0x6a, 0xc4, 0x27, 0x3e, 0xd3, 0x20, 0x35, 0xc4, 0x0b, 0x0a, 0xbc, 0x0d, 0x65, 0x5a, 0xa8,
	0xe6, 0xf9, 0xf4, 0x87, 0x83, 0xc6, 0xdb, 0xfc, 0x77, 0x85, 0x36, 0x1c, 0x3f, 0x41, 0x7d, 0x91,
	0x7a, 0xce, 0xc4, 0x09, 0xc7, 0x89, 0x5b, 0x95, 0x41, 0x5f, 0xa4, 0xa4, 0x2f, 0x52, 0xfc, 0x09,
	0x8d, 0x72, 0xfe, 0xa5, 0xe0, 0x60, 0x78, 0xee, 0xf5, 0x27, 0x4e, 0x78, 0x9c, 0xbc, 0xaa, 0xca,
	0x60, 0x47, 0xfe, 0x29, 0x83, 0xb3, 0x4c, 0x98, 0xcb, 0x62, 0x11, 0x31, 0x2d, 0x63, 0xfb, 0xe2,
	0x66, 0x9c, 0x41, 0xba, 0x8c, 0xcd, 0xb7, 0x6b, 0x0e, 0xd1, 0x8c, 0xb1, 0x59, 0x9a, 0xe6, 0x1c,
	0x80, 0xec, 0xbc, 0xd3, 0xbf, 0x03, 0xf4, 0xa0, 0xd3, 0x62, 0x4e, 0x0d, 0xc5, 0xa7, 0xe8, 0xc0,
	0x08, 0xc9, 0xeb, 0x2e, 0x83, 0x64, 0x58, 0x95, 0x41, 0x7d, 0x4f, 0xea, 0x2b, 0xfe, 0x80, 0x8e,
	0x28, 0x63, 0xba, 0x50, 0xc6, 0xb6, 0x79, 0x59, 0x95, 0xc1, 0x96, 0xfa, 0xff, 0x2e, 0x5b, 0x27,
	0x9e, 0x22, 0x57, 0xd2, 0x7c, 0xc9, 0x8d, 0x37, 0x98, 0x38, 0xe1, 0x28, 0x41, 0x55, 0x19, 0x58,
	0x86, 0xd8, 0x89, 0x43, 0x34, 0x4c, 0x8b, 0x9c, 0x1a, 0xa1, 0x95, 0x77, 0x50, 0xab, 0x8e, 0xab,
	0x32, 0x68, 0x39, 0xd2, 0x22, 0xfc, 0x06, 0x8d, 0x98, 0x56, 0xc0, 0x15, 0x14, 0xe0, 0x1d, 0x4e,
	0x9c, 0xf0, 0xde, 0xf3, 0xd3, 0xa8, 0xe9, 0x11, 0x6d, 0x76, 0xd2, 0xae, 0x70, 0xce, 0xd9, 0x85,
	0x16, 0x2a, 0x79, 0x78, 0x5b, 0x06, 0xbd, 0xcd, 0xb9, 0xb6, 0x36, 0xb2, 0x83, 0x78, 0x8e, 0xdc,
	0x9c, 0x7f, 0x2e, 0x54, 0xea, 0xb9, 0x7b, 0x64, 0xdd, 0xb7, 0x59, 0xd6, 0x43, 0xec, 0xc4, 0x33,
	0x74, 0x08, 0x57, 0x14, 0x2e, 0xbd, 0xa3, 0x3d, 0x42, 0xc6, 0x36, 0xa4, 0xb1, 0x90, 0x66, 0xe0,
	0xb7, 0x08, 0x31, 0x2d, 0xa5, 0x00, 0xd8, 0x9c, 0xc1, 0x70, 0x8f, 0x1c, 0x6c, 0x73, 0x3a, 0x3e,
	0xd2, 0xc1, 0xc9, 0xeb, 0xdb, 0x95, 0xef, 0xdc, 0xad, 0x7c, 0xe7, 0xf7, 0xca, 0x77, 0x7e, 0xae,
	0xfd, 0xde, 0xdd, 0xda, 0xef, 0xfd, 0x5a, 0xfb, 0xbd, 0x8f, 0xcf, 0x3a, 0x9b, 0xdc, 0xfd, 0x21,
	0xd2, 0x7c, 0xd7, 0x8a, 0xc7, 0x37, 0x5d, 0x0a, 0xb2, 0x85, 0x5b, 0x7f, 0xd7, 0x2f, 0xfe, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x9d, 0x4e, 0xed, 0xf4, 0x4c, 0x03, 0x00, 0x00,
}

func (m *TxCancelQuote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxCancelQuote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxCancelQuote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintTxCancel(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTxCancel(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CancelQuoteData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelQuoteData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelQuoteData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxCancel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.Slash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxCancel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Refund.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxCancel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Consensus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxCancel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTxCancel(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Market) > 0 {
		i -= len(m.Market)
		copy(dAtA[i:], m.Market)
		i = encodeVarintTxCancel(dAtA, i, uint64(len(m.Market)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTxCancel(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.Time != 0 {
		i = encodeVarintTxCancel(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxCancel(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxCancel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxCancelQuote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTxCancel(uint64(m.Id))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovTxCancel(uint64(l))
	}
	return n
}

func (m *CancelQuoteData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTxCancel(uint64(m.Time))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTxCancel(uint64(l))
	}
	l = len(m.Market)
	if l > 0 {
		n += 1 + l + sovTxCancel(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTxCancel(uint64(l))
	}
	l = m.Consensus.Size()
	n += 1 + l + sovTxCancel(uint64(l))
	l = m.Refund.Size()
	n += 1 + l + sovTxCancel(uint64(l))
	l = m.Slash.Size()
	n += 1 + l + sovTxCancel(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovTxCancel(uint64(l))
	return n
}

func sovTxCancel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxCancel(x uint64) (n int) {
	return sovTxCancel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxCancelQuote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxCancel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxCancelQuote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxCancelQuote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxCancel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCancel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = append(m.Requester[:0], dAtA[iNdEx:postIndex]...)
			if m.Requester == nil {
				m.Requester = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxCancel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxCancel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelQuoteData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxCancel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelQuoteData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelQuoteData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxCancel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCancel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxCancel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCancel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxCancel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCancel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxCancel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxCancel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxCancel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxCancel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Refund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxCancel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxCancel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxCancel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxCancel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxCancel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxCancel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxCancel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxCancel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxCancel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxCancel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxCancel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxCancel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxCancel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxCancel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxCancel = fmt.Errorf("proto: unexpected end of group")
)
