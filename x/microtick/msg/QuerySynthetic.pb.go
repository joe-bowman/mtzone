// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/QuerySynthetic.proto

package msg

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySyntheticRequest struct {
	Market   string `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
	Duration string `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration"`
	Offset   uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset"`
	Limit    uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit"`
}

func (m *QuerySyntheticRequest) Reset()         { *m = QuerySyntheticRequest{} }
func (m *QuerySyntheticRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySyntheticRequest) ProtoMessage()    {}
func (*QuerySyntheticRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4d37daa915c8bef, []int{0}
}
func (m *QuerySyntheticRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySyntheticRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySyntheticRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySyntheticRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySyntheticRequest.Merge(m, src)
}
func (m *QuerySyntheticRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySyntheticRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySyntheticRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySyntheticRequest proto.InternalMessageInfo

func (m *QuerySyntheticRequest) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *QuerySyntheticRequest) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *QuerySyntheticRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *QuerySyntheticRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SyntheticQuote struct {
	Spot     types.DecCoin `protobuf:"bytes,5,opt,name=spot,proto3" json:"spot"`
	Quantity types.DecCoin `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity"`
}

func (m *SyntheticQuote) Reset()         { *m = SyntheticQuote{} }
func (m *SyntheticQuote) String() string { return proto.CompactTextString(m) }
func (*SyntheticQuote) ProtoMessage()    {}
func (*SyntheticQuote) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4d37daa915c8bef, []int{1}
}
func (m *SyntheticQuote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyntheticQuote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyntheticQuote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyntheticQuote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyntheticQuote.Merge(m, src)
}
func (m *SyntheticQuote) XXX_Size() int {
	return m.Size()
}
func (m *SyntheticQuote) XXX_DiscardUnknown() {
	xxx_messageInfo_SyntheticQuote.DiscardUnknown(m)
}

var xxx_messageInfo_SyntheticQuote proto.InternalMessageInfo

func (m *SyntheticQuote) GetSpot() types.DecCoin {
	if m != nil {
		return m.Spot
	}
	return types.DecCoin{}
}

func (m *SyntheticQuote) GetQuantity() types.DecCoin {
	if m != nil {
		return m.Quantity
	}
	return types.DecCoin{}
}

type QuerySyntheticResponse struct {
	Consensus  types.DecCoin     `protobuf:"bytes,1,opt,name=consensus,proto3" json:"consensus"`
	SumBacking types.DecCoin     `protobuf:"bytes,2,opt,name=sum_backing,json=sumBacking,proto3" json:"sum_backing"`
	SumWeight  types.DecCoin     `protobuf:"bytes,3,opt,name=sum_weight,json=sumWeight,proto3" json:"sum_weight"`
	Offset     uint32            `protobuf:"varint,4,opt,name=offset,proto3" json:"offset"`
	Limit      uint32            `protobuf:"varint,5,opt,name=limit,proto3" json:"limit"`
	TotalAsks  uint32            `protobuf:"varint,6,opt,name=total_asks,json=totalAsks,proto3" json:"total_asks"`
	TotalBids  uint32            `protobuf:"varint,7,opt,name=total_bids,json=totalBids,proto3" json:"total_bids"`
	Asks       []*SyntheticQuote `protobuf:"bytes,8,rep,name=asks,proto3" json:"asks"`
	Bids       []*SyntheticQuote `protobuf:"bytes,9,rep,name=bids,proto3" json:"bids"`
}

func (m *QuerySyntheticResponse) Reset()         { *m = QuerySyntheticResponse{} }
func (m *QuerySyntheticResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySyntheticResponse) ProtoMessage()    {}
func (*QuerySyntheticResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4d37daa915c8bef, []int{2}
}
func (m *QuerySyntheticResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySyntheticResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySyntheticResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySyntheticResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySyntheticResponse.Merge(m, src)
}
func (m *QuerySyntheticResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySyntheticResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySyntheticResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySyntheticResponse proto.InternalMessageInfo

func (m *QuerySyntheticResponse) GetConsensus() types.DecCoin {
	if m != nil {
		return m.Consensus
	}
	return types.DecCoin{}
}

func (m *QuerySyntheticResponse) GetSumBacking() types.DecCoin {
	if m != nil {
		return m.SumBacking
	}
	return types.DecCoin{}
}

func (m *QuerySyntheticResponse) GetSumWeight() types.DecCoin {
	if m != nil {
		return m.SumWeight
	}
	return types.DecCoin{}
}

func (m *QuerySyntheticResponse) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *QuerySyntheticResponse) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QuerySyntheticResponse) GetTotalAsks() uint32 {
	if m != nil {
		return m.TotalAsks
	}
	return 0
}

func (m *QuerySyntheticResponse) GetTotalBids() uint32 {
	if m != nil {
		return m.TotalBids
	}
	return 0
}

func (m *QuerySyntheticResponse) GetAsks() []*SyntheticQuote {
	if m != nil {
		return m.Asks
	}
	return nil
}

func (m *QuerySyntheticResponse) GetBids() []*SyntheticQuote {
	if m != nil {
		return m.Bids
	}
	return nil
}

func init() {
	proto.RegisterType((*QuerySyntheticRequest)(nil), "microtick.v1beta1.msg.QuerySyntheticRequest")
	proto.RegisterType((*SyntheticQuote)(nil), "microtick.v1beta1.msg.SyntheticQuote")
	proto.RegisterType((*QuerySyntheticResponse)(nil), "microtick.v1beta1.msg.QuerySyntheticResponse")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/msg/QuerySynthetic.proto", fileDescriptor_e4d37daa915c8bef)
}

var fileDescriptor_e4d37daa915c8bef = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x6d, 0x58, 0x5b, 0x1a, 0x77, 0x9b, 0xc0, 0x30, 0x14, 0x4d, 0x28, 0xa9, 0x2a, 0x21, 0x45,
	0x20, 0x12, 0x6d, 0xbc, 0x23, 0x91, 0xc1, 0x0b, 0x12, 0x42, 0x33, 0x0f, 0x48, 0xbc, 0x54, 0x49,
	0xea, 0xa5, 0x56, 0xe6, 0xb8, 0xcb, 0xb5, 0x81, 0xf2, 0x15, 0x7c, 0x00, 0x5f, 0xc0, 0x1f, 0xf0,
	0x07, 0x7b, 0xdc, 0x23, 0x4f, 0x11, 0x6a, 0xdf, 0xfa, 0x15, 0x28, 0x4e, 0x94, 0x74, 0xd3, 0xa4,
	0xc2, 0x8b, 0xef, 0xe9, 0xe9, 0xb9, 0xe7, 0xda, 0xf7, 0xda, 0x41, 0x4f, 0x39, 0x8b, 0x73, 0x21,
	0x59, 0x9c, 0xfa, 0x9f, 0x8f, 0x22, 0x2a, 0xc3, 0x23, 0x9f, 0x43, 0xe2, 0x9f, 0x2a, 0x9a, 0x2f,
	0x3e, 0x2c, 0x32, 0x39, 0xa3, 0x92, 0xc5, 0xde, 0x3c, 0x17, 0x52, 0xe0, 0x83, 0x46, 0xeb, 0xd5,
	0x5a, 0x8f, 0x43, 0x72, 0xf8, 0x30, 0x11, 0x89, 0xd0, 0x0a, 0xbf, 0x44, 0x95, 0xf8, 0xd0, 0x8e,
	0x05, 0x70, 0x01, 0x7e, 0x14, 0x02, 0x6d, 0xac, 0x63, 0xc1, 0xb2, 0xea, 0xff, 0xf1, 0x4f, 0x03,
	0x1d, 0x5c, 0xaf, 0x42, 0xe8, 0x85, 0xa2, 0x20, 0xf1, 0x18, 0xf5, 0x79, 0x98, 0xa7, 0x54, 0x5a,
	0xc6, 0xc8, 0x70, 0xcd, 0x00, 0xad, 0x0b, 0xa7, 0x66, 0x48, 0x1d, 0xb1, 0x8b, 0x06, 0x53, 0x95,
	0x87, 0x92, 0x89, 0xcc, 0xba, 0xa3, 0x55, 0xbb, 0xeb, 0xc2, 0x69, 0x38, 0xd2, 0xa0, 0xd2, 0x4d,
	0x9c, 0x9d, 0x01, 0x95, 0xd6, 0xce, 0xc8, 0x70, 0xf7, 0x2a, 0xb7, 0x8a, 0x21, 0x75, 0xc4, 0x0e,
	0xea, 0x9d, 0x33, 0xce, 0xa4, 0xd5, 0xd5, 0x12, 0x73, 0x5d, 0x38, 0x15, 0x41, 0xaa, 0x30, 0xfe,
	0x61, 0xa0, 0xfd, 0x66, 0x9f, 0xa7, 0x4a, 0x48, 0x8a, 0x5f, 0xa2, 0x2e, 0xcc, 0x85, 0xb4, 0x7a,
	0x23, 0xc3, 0x1d, 0x1e, 0x3f, 0xf6, 0xaa, 0xe3, 0x7a, 0xe5, 0x71, 0x9b, 0xee, 0xbc, 0xa6, 0xf1,
	0x89, 0x60, 0x59, 0xb0, 0x7b, 0x59, 0x38, 0x9d, 0x75, 0xe1, 0xe8, 0x0c, 0xa2, 0x57, 0xfc, 0x16,
	0x0d, 0x2e, 0x54, 0x98, 0x49, 0x26, 0x17, 0x56, 0xff, 0x1f, 0x3c, 0xee, 0xd5, 0x1e, 0x4d, 0x16,
	0x69, 0xd0, 0xf8, 0x57, 0x17, 0x3d, 0xba, 0xd9, 0x4b, 0x98, 0x8b, 0x0c, 0x28, 0x7e, 0x87, 0xcc,
	0xb8, 0x04, 0x19, 0x28, 0xd0, 0xfd, 0xdc, 0x56, 0xe7, 0x7e, 0x5d, 0xa7, 0x4d, 0x23, 0x2d, 0xc4,
	0x04, 0x0d, 0x41, 0xf1, 0x49, 0x14, 0xc6, 0x29, 0xcb, 0x12, 0xdd, 0xfa, 0x6d, 0x86, 0x0f, 0x6a,
	0xc3, 0xcd, 0x44, 0x82, 0x40, 0xf1, 0xa0, 0xc2, 0xf8, 0x3d, 0x2a, 0x7f, 0x4d, 0xbe, 0x50, 0x96,
	0xcc, 0xaa, 0x29, 0x6d, 0xb3, 0xc4, 0xb5, 0xe5, 0x46, 0x1e, 0x31, 0x41, 0xf1, 0x8f, 0x1a, 0x6e,
	0x8c, 0xbc, 0xbb, 0x7d, 0xe4, 0xbd, 0xdb, 0x47, 0x8e, 0x9f, 0x23, 0x24, 0x85, 0x0c, 0xcf, 0x27,
	0x21, 0xa4, 0xa0, 0x27, 0xb4, 0x17, 0xec, 0x97, 0x35, 0x5b, 0x96, 0x98, 0x1a, 0xbf, 0x82, 0x14,
	0x5a, 0x79, 0xc4, 0xa6, 0x60, 0xdd, 0xbd, 0x29, 0x2f, 0xd9, 0x5a, 0x1e, 0xb0, 0x29, 0xe0, 0x13,
	0xd4, 0xd5, 0xbe, 0x83, 0xd1, 0x8e, 0x3b, 0x3c, 0x7e, 0xe2, 0xdd, 0xfa, 0xb2, 0xbc, 0xeb, 0x57,
	0x2e, 0x18, 0x94, 0x57, 0x48, 0x17, 0xd6, 0x6b, 0x69, 0xa2, 0xab, 0x99, 0xff, 0x6d, 0xa2, 0xb7,
	0xa3, 0xd7, 0xe0, 0xcd, 0xe5, 0xd2, 0x36, 0xae, 0x96, 0xb6, 0xf1, 0x67, 0x69, 0x1b, 0xdf, 0x57,
	0x76, 0xe7, 0x6a, 0x65, 0x77, 0x7e, 0xaf, 0xec, 0xce, 0xa7, 0x67, 0x09, 0x93, 0x33, 0x15, 0x79,
	0xb1, 0xe0, 0x7e, 0xfb, 0x95, 0xe0, 0xf2, 0x9b, 0xc8, 0xa8, 0xff, 0x75, 0x93, 0x82, 0x24, 0xea,
	0xeb, 0x57, 0xfd, 0xe2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xc5, 0x97, 0xe9, 0x50, 0x04,
	0x00, 0x00,
}

func (m *QuerySyntheticRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySyntheticRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySyntheticRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Market) > 0 {
		i -= len(m.Market)
		copy(dAtA[i:], m.Market)
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(len(m.Market)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyntheticQuote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyntheticQuote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyntheticQuote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Quantity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Spot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}

func (m *QuerySyntheticResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySyntheticResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySyntheticResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerySynthetic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Asks) > 0 {
		for iNdEx := len(m.Asks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Asks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerySynthetic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.TotalBids != 0 {
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(m.TotalBids))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalAsks != 0 {
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(m.TotalAsks))
		i--
		dAtA[i] = 0x30
	}
	if m.Limit != 0 {
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Offset != 0 {
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.SumWeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SumBacking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Consensus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerySynthetic(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuerySynthetic(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerySynthetic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySyntheticRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Market)
	if l > 0 {
		n += 1 + l + sovQuerySynthetic(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovQuerySynthetic(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovQuerySynthetic(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovQuerySynthetic(uint64(m.Limit))
	}
	return n
}

func (m *SyntheticQuote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Spot.Size()
	n += 1 + l + sovQuerySynthetic(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovQuerySynthetic(uint64(l))
	return n
}

func (m *QuerySyntheticResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Consensus.Size()
	n += 1 + l + sovQuerySynthetic(uint64(l))
	l = m.SumBacking.Size()
	n += 1 + l + sovQuerySynthetic(uint64(l))
	l = m.SumWeight.Size()
	n += 1 + l + sovQuerySynthetic(uint64(l))
	if m.Offset != 0 {
		n += 1 + sovQuerySynthetic(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovQuerySynthetic(uint64(m.Limit))
	}
	if m.TotalAsks != 0 {
		n += 1 + sovQuerySynthetic(uint64(m.TotalAsks))
	}
	if m.TotalBids != 0 {
		n += 1 + sovQuerySynthetic(uint64(m.TotalBids))
	}
	if len(m.Asks) > 0 {
		for _, e := range m.Asks {
			l = e.Size()
			n += 1 + l + sovQuerySynthetic(uint64(l))
		}
	}
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuerySynthetic(uint64(l))
		}
	}
	return n
}

func sovQuerySynthetic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerySynthetic(x uint64) (n int) {
	return sovQuerySynthetic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySyntheticRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySynthetic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySyntheticRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySyntheticRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySynthetic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyntheticQuote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySynthetic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyntheticQuote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyntheticQuote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySynthetic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySyntheticResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerySynthetic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySyntheticResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySyntheticResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumBacking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SumBacking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumWeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SumWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAsks", wireType)
			}
			m.TotalAsks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAsks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBids", wireType)
			}
			m.TotalBids = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBids |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asks = append(m.Asks, &SyntheticQuote{})
			if err := m.Asks[len(m.Asks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &SyntheticQuote{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerySynthetic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerySynthetic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerySynthetic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerySynthetic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerySynthetic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerySynthetic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerySynthetic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerySynthetic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerySynthetic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerySynthetic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerySynthetic = fmt.Errorf("proto: unexpected end of group")
)
