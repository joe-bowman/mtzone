// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/GRPC.proto

package msg

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("microtick/v1beta1/msg/GRPC.proto", fileDescriptor_db9f2f166935b4d7) }

var fileDescriptor_db9f2f166935b4d7 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x1b, 0x04, 0x85, 0xf9, 0x86, 0xd1, 0x84, 0xa8, 0xba, 0x80, 0x26, 0xfe, 0x74, 0x1d,
	0xc4, 0x0c, 0x3e, 0x01, 0x9b, 0x10, 0x27, 0xc4, 0x36, 0x38, 0x71, 0x73, 0x53, 0x2b, 0x8b, 0x4a,
	0xfc, 0x76, 0xb6, 0x83, 0xd8, 0xa2, 0x5d, 0xe0, 0xc2, 0x0d, 0x24, 0x6e, 0x7c, 0x22, 0x8e, 0x93,
	0xb8, 0xc0, 0x0d, 0xb5, 0x7c, 0x90, 0x29, 0xb6, 0xe3, 0xf9, 0x50, 0x59, 0x3e, 0xb5, 0x8a, 0x7e,
	0xf1, 0xf3, 0xb3, 0x5f, 0x3f, 0x41, 0xf7, 0xaa, 0x32, 0x17, 0xa0, 0xca, 0x7c, 0x46, 0x3e, 0xee,
	0x4c, 0x98, 0xa2, 0x3b, 0xa4, 0x92, 0x05, 0x79, 0x75, 0xb8, 0xbf, 0x97, 0xcd, 0x05, 0x28, 0xc0,
	0xeb, 0x8e, 0xc8, 0x2c, 0x91, 0x55, 0xb2, 0x18, 0x0c, 0x0b, 0x80, 0xe2, 0x03, 0x23, 0x74, 0x5e,
	0x12, 0xca, 0x39, 0x28, 0xaa, 0x4a, 0xe0, 0xd2, 0xbc, 0x34, 0x18, 0xad, 0x5e, 0xf6, 0xa0, 0x66,
	0xe2, 0xe4, 0x45, 0x9e, 0x43, 0xcd, 0x95, 0x25, 0x1f, 0x05, 0xc8, 0xd7, 0x54, 0xcc, 0x58, 0x07,
	0x8e, 0x03, 0xe0, 0x1e, 0x70, 0xc9, 0xb8, 0xac, 0x65, 0x04, 0xfb, 0x46, 0x4c, 0x99, 0xd8, 0x05,
	0x98, 0x45, 0xb0, 0x6f, 0x4f, 0xb8, 0x3a, 0x62, 0xaa, 0xcc, 0x2d, 0xfb, 0x30, 0xc0, 0x1e, 0xd4,
	0xa0, 0x58, 0x04, 0xf7, 0x4e, 0xd0, 0x29, 0x8b, 0xd8, 0xfc, 0x3e, 0x15, 0xb4, 0xb2, 0x1b, 0x7a,
	0xf6, 0xf7, 0x06, 0xba, 0xda, 0xce, 0x04, 0x7f, 0x4d, 0xd0, 0x75, 0x7b, 0x80, 0x78, 0x9c, 0xad,
	0x1c, 0x4d, 0xe6, 0x9f, 0xf2, 0x21, 0x3b, 0xae, 0x99, 0x54, 0x83, 0xed, 0x28, 0x56, 0xce, 0xdb,
	0x83, 0xdc, 0xbc, 0xff, 0xf9, 0xf7, 0xff, 0x1f, 0x57, 0x52, 0x3c, 0x24, 0x97, 0x7e, 0xd4, 0x30,
	0xa4, 0xb1, 0x7f, 0xce, 0xf0, 0x97, 0x04, 0xf5, 0xcd, 0x84, 0xf0, 0x56, 0x68, 0x75, 0xc3, 0x74,
	0x22, 0xe3, 0x18, 0xd4, 0x7a, 0x6c, 0x6a, 0x8f, 0x21, 0x1e, 0x78, 0x1e, 0x95, 0x46, 0x48, 0x63,
	0x7e, 0xcf, 0xf0, 0xb7, 0x04, 0xad, 0xb9, 0xf1, 0xe3, 0xc7, 0xa1, 0xd5, 0x1d, 0xd6, 0xb9, 0x3c,
	0x89, 0xa4, 0xad, 0xce, 0x03, 0xad, 0x73, 0x17, 0x6f, 0x78, 0x3a, 0x39, 0x70, 0x26, 0x5b, 0xea,
	0xd2, 0xe8, 0x67, 0x82, 0xd6, 0xdc, 0x25, 0x0b, 0x1b, 0x39, 0x2c, 0xca, 0xc8, 0xa3, 0xad, 0xd1,
	0x53, 0x6d, 0x34, 0xc6, 0x23, 0xcf, 0x08, 0x5a, 0x6a, 0x02, 0x30, 0x73, 0x46, 0xa4, 0x99, 0xd6,
	0x42, 0xd7, 0xd3, 0xc8, 0xb9, 0x5b, 0x1d, 0x96, 0x73, 0x58, 0x94, 0x9c, 0x47, 0x07, 0xe4, 0x64,
	0x47, 0xad, 0x94, 0x6b, 0xd0, 0x35, 0xdd, 0x22, 0x3c, 0x0a, 0x25, 0x69, 0xa4, 0x73, 0xda, 0x8a,
	0x20, 0xad, 0xcf, 0x86, 0xf6, 0xb9, 0x8d, 0xd7, 0x3d, 0x9f, 0xe3, 0x96, 0x20, 0x4d, 0x39, 0xd5,
	0xe1, 0xba, 0x9a, 0xe1, 0x70, 0x8d, 0x44, 0x85, 0x5b, 0x32, 0x10, 0xae, 0x5a, 0xc2, 0x84, 0x9f,
	0xa2, 0xbe, 0xe9, 0x7b, 0xb8, 0x4a, 0x86, 0x89, 0xaa, 0x52, 0x87, 0xda, 0xfc, 0x3b, 0x3a, 0xff,
	0x16, 0xbe, 0xe9, 0xe5, 0xcf, 0x35, 0xb2, 0xfb, 0xf2, 0xd7, 0x22, 0x4d, 0xce, 0x17, 0x69, 0xf2,
	0x6f, 0x91, 0x26, 0xdf, 0x97, 0x69, 0xef, 0x7c, 0x99, 0xf6, 0xfe, 0x2c, 0xd3, 0xde, 0xfb, 0xed,
	0xa2, 0x54, 0x47, 0xf5, 0x24, 0xcb, 0xa1, 0xf2, 0x1b, 0xa8, 0x4e, 0x81, 0x33, 0xf2, 0xc9, 0x7f,
	0x24, 0x8b, 0x49, 0x5f, 0x7f, 0xa9, 0x9e, 0x5f, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x54, 0xaa,
	0x1d, 0x52, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GRPCClient is the client API for GRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCClient interface {
	Account(ctx context.Context, in *QueryAccountRequest, opts ...grpc.CallOption) (*QueryAccountResponse, error)
	Market(ctx context.Context, in *QueryMarketRequest, opts ...grpc.CallOption) (*QueryMarketResponse, error)
	Consensus(ctx context.Context, in *QueryConsensusRequest, opts ...grpc.CallOption) (*QueryConsensusResponse, error)
	OrderBook(ctx context.Context, in *QueryOrderBookRequest, opts ...grpc.CallOption) (*QueryOrderBookResponse, error)
	Synthetic(ctx context.Context, in *QuerySyntheticRequest, opts ...grpc.CallOption) (*QuerySyntheticResponse, error)
	Quote(ctx context.Context, in *QueryQuoteRequest, opts ...grpc.CallOption) (*QueryQuoteResponse, error)
	Trade(ctx context.Context, in *QueryTradeRequest, opts ...grpc.CallOption) (*QueryTradeResponse, error)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type gRPCClient struct {
	cc grpc1.ClientConn
}

func NewGRPCClient(cc grpc1.ClientConn) GRPCClient {
	return &gRPCClient{cc}
}

func (c *gRPCClient) Account(ctx context.Context, in *QueryAccountRequest, opts ...grpc.CallOption) (*QueryAccountResponse, error) {
	out := new(QueryAccountResponse)
	err := c.cc.Invoke(ctx, "/microtick.v1beta1.msg.GRPC/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) Market(ctx context.Context, in *QueryMarketRequest, opts ...grpc.CallOption) (*QueryMarketResponse, error) {
	out := new(QueryMarketResponse)
	err := c.cc.Invoke(ctx, "/microtick.v1beta1.msg.GRPC/Market", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) Consensus(ctx context.Context, in *QueryConsensusRequest, opts ...grpc.CallOption) (*QueryConsensusResponse, error) {
	out := new(QueryConsensusResponse)
	err := c.cc.Invoke(ctx, "/microtick.v1beta1.msg.GRPC/Consensus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) OrderBook(ctx context.Context, in *QueryOrderBookRequest, opts ...grpc.CallOption) (*QueryOrderBookResponse, error) {
	out := new(QueryOrderBookResponse)
	err := c.cc.Invoke(ctx, "/microtick.v1beta1.msg.GRPC/OrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) Synthetic(ctx context.Context, in *QuerySyntheticRequest, opts ...grpc.CallOption) (*QuerySyntheticResponse, error) {
	out := new(QuerySyntheticResponse)
	err := c.cc.Invoke(ctx, "/microtick.v1beta1.msg.GRPC/Synthetic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) Quote(ctx context.Context, in *QueryQuoteRequest, opts ...grpc.CallOption) (*QueryQuoteResponse, error) {
	out := new(QueryQuoteResponse)
	err := c.cc.Invoke(ctx, "/microtick.v1beta1.msg.GRPC/Quote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) Trade(ctx context.Context, in *QueryTradeRequest, opts ...grpc.CallOption) (*QueryTradeResponse, error) {
	out := new(QueryTradeResponse)
	err := c.cc.Invoke(ctx, "/microtick.v1beta1.msg.GRPC/Trade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/microtick.v1beta1.msg.GRPC/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCServer is the server API for GRPC service.
type GRPCServer interface {
	Account(context.Context, *QueryAccountRequest) (*QueryAccountResponse, error)
	Market(context.Context, *QueryMarketRequest) (*QueryMarketResponse, error)
	Consensus(context.Context, *QueryConsensusRequest) (*QueryConsensusResponse, error)
	OrderBook(context.Context, *QueryOrderBookRequest) (*QueryOrderBookResponse, error)
	Synthetic(context.Context, *QuerySyntheticRequest) (*QuerySyntheticResponse, error)
	Quote(context.Context, *QueryQuoteRequest) (*QueryQuoteResponse, error)
	Trade(context.Context, *QueryTradeRequest) (*QueryTradeResponse, error)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedGRPCServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCServer struct {
}

func (*UnimplementedGRPCServer) Account(ctx context.Context, req *QueryAccountRequest) (*QueryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (*UnimplementedGRPCServer) Market(ctx context.Context, req *QueryMarketRequest) (*QueryMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Market not implemented")
}
func (*UnimplementedGRPCServer) Consensus(ctx context.Context, req *QueryConsensusRequest) (*QueryConsensusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consensus not implemented")
}
func (*UnimplementedGRPCServer) OrderBook(ctx context.Context, req *QueryOrderBookRequest) (*QueryOrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBook not implemented")
}
func (*UnimplementedGRPCServer) Synthetic(ctx context.Context, req *QuerySyntheticRequest) (*QuerySyntheticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Synthetic not implemented")
}
func (*UnimplementedGRPCServer) Quote(ctx context.Context, req *QueryQuoteRequest) (*QueryQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quote not implemented")
}
func (*UnimplementedGRPCServer) Trade(ctx context.Context, req *QueryTradeRequest) (*QueryTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trade not implemented")
}
func (*UnimplementedGRPCServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterGRPCServer(s grpc1.Server, srv GRPCServer) {
	s.RegisterService(&_GRPC_serviceDesc, srv)
}

func _GRPC_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtick.v1beta1.msg.GRPC/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).Account(ctx, req.(*QueryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_Market_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).Market(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtick.v1beta1.msg.GRPC/Market",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).Market(ctx, req.(*QueryMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_Consensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsensusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).Consensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtick.v1beta1.msg.GRPC/Consensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).Consensus(ctx, req.(*QueryConsensusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_OrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).OrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtick.v1beta1.msg.GRPC/OrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).OrderBook(ctx, req.(*QueryOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_Synthetic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySyntheticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).Synthetic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtick.v1beta1.msg.GRPC/Synthetic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).Synthetic(ctx, req.(*QuerySyntheticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_Quote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).Quote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtick.v1beta1.msg.GRPC/Quote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).Quote(ctx, req.(*QueryQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_Trade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).Trade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtick.v1beta1.msg.GRPC/Trade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).Trade(ctx, req.(*QueryTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microtick.v1beta1.msg.GRPC/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "microtick.v1beta1.msg.GRPC",
	HandlerType: (*GRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Account",
			Handler:    _GRPC_Account_Handler,
		},
		{
			MethodName: "Market",
			Handler:    _GRPC_Market_Handler,
		},
		{
			MethodName: "Consensus",
			Handler:    _GRPC_Consensus_Handler,
		},
		{
			MethodName: "OrderBook",
			Handler:    _GRPC_OrderBook_Handler,
		},
		{
			MethodName: "Synthetic",
			Handler:    _GRPC_Synthetic_Handler,
		},
		{
			MethodName: "Quote",
			Handler:    _GRPC_Quote_Handler,
		},
		{
			MethodName: "Trade",
			Handler:    _GRPC_Trade_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _GRPC_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microtick/v1beta1/msg/GRPC.proto",
}
