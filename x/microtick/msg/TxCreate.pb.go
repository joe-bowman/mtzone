// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/TxCreate.proto

package msg

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxCreateQuote struct {
	Market   string                                        `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
	Duration string                                        `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration"`
	Provider github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=provider,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"provider"`
	Backing  string                                        `protobuf:"bytes,4,opt,name=backing,proto3" json:"backing"`
	Spot     string                                        `protobuf:"bytes,5,opt,name=spot,proto3" json:"spot"`
	Ask      string                                        `protobuf:"bytes,6,opt,name=ask,proto3" json:"ask"`
	Bid      string                                        `protobuf:"bytes,7,opt,name=bid,proto3" json:"bid"`
}

func (m *TxCreateQuote) Reset()         { *m = TxCreateQuote{} }
func (m *TxCreateQuote) String() string { return proto.CompactTextString(m) }
func (*TxCreateQuote) ProtoMessage()    {}
func (*TxCreateQuote) Descriptor() ([]byte, []int) {
	return fileDescriptor_d89eaaf4d01a17d6, []int{0}
}
func (m *TxCreateQuote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxCreateQuote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxCreateQuote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxCreateQuote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxCreateQuote.Merge(m, src)
}
func (m *TxCreateQuote) XXX_Size() int {
	return m.Size()
}
func (m *TxCreateQuote) XXX_DiscardUnknown() {
	xxx_messageInfo_TxCreateQuote.DiscardUnknown(m)
}

var xxx_messageInfo_TxCreateQuote proto.InternalMessageInfo

func (m *TxCreateQuote) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *TxCreateQuote) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *TxCreateQuote) GetProvider() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *TxCreateQuote) GetBacking() string {
	if m != nil {
		return m.Backing
	}
	return ""
}

func (m *TxCreateQuote) GetSpot() string {
	if m != nil {
		return m.Spot
	}
	return ""
}

func (m *TxCreateQuote) GetAsk() string {
	if m != nil {
		return m.Ask
	}
	return ""
}

func (m *TxCreateQuote) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

type CreateQuoteData struct {
	Time       int64         `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	Id         uint32        `protobuf:"varint,2,opt,name=id,proto3" json:"id"`
	Consensus  types.DecCoin `protobuf:"bytes,3,opt,name=consensus,proto3" json:"consensus"`
	Commission types.DecCoin `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission"`
	Reward     types.Coin    `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward"`
	Adjustment string        `protobuf:"bytes,6,opt,name=adjustment,proto3" json:"adjustment"`
}

func (m *CreateQuoteData) Reset()         { *m = CreateQuoteData{} }
func (m *CreateQuoteData) String() string { return proto.CompactTextString(m) }
func (*CreateQuoteData) ProtoMessage()    {}
func (*CreateQuoteData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d89eaaf4d01a17d6, []int{1}
}
func (m *CreateQuoteData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateQuoteData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateQuoteData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateQuoteData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateQuoteData.Merge(m, src)
}
func (m *CreateQuoteData) XXX_Size() int {
	return m.Size()
}
func (m *CreateQuoteData) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateQuoteData.DiscardUnknown(m)
}

var xxx_messageInfo_CreateQuoteData proto.InternalMessageInfo

func (m *CreateQuoteData) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CreateQuoteData) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateQuoteData) GetConsensus() types.DecCoin {
	if m != nil {
		return m.Consensus
	}
	return types.DecCoin{}
}

func (m *CreateQuoteData) GetCommission() types.DecCoin {
	if m != nil {
		return m.Commission
	}
	return types.DecCoin{}
}

func (m *CreateQuoteData) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

func (m *CreateQuoteData) GetAdjustment() string {
	if m != nil {
		return m.Adjustment
	}
	return ""
}

func init() {
	proto.RegisterType((*TxCreateQuote)(nil), "microtick.v1beta1.msg.TxCreateQuote")
	proto.RegisterType((*CreateQuoteData)(nil), "microtick.v1beta1.msg.CreateQuoteData")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/msg/TxCreate.proto", fileDescriptor_d89eaaf4d01a17d6)
}

var fileDescriptor_d89eaaf4d01a17d6 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0xb2, 0xd2, 0x76, 0xee, 0x36, 0x84, 0x05, 0x28, 0x9b, 0xa6, 0x64, 0xaa, 0x40, 0xaa,
	0x84, 0x96, 0x68, 0xe3, 0xcc, 0xa1, 0xdd, 0x38, 0x22, 0x81, 0xc5, 0x05, 0x6e, 0x8e, 0x6d, 0x05,
	0x53, 0x39, 0xae, 0x6c, 0x67, 0x0c, 0x7e, 0x05, 0xff, 0x85, 0x3f, 0xb1, 0xe3, 0x8e, 0x48, 0x48,
	0x11, 0x6a, 0x6f, 0xf9, 0x09, 0x9c, 0x90, 0x9d, 0x34, 0xc9, 0x81, 0x03, 0x97, 0xe7, 0xe7, 0xef,
	0x7d, 0xef, 0xb3, 0xf3, 0x3d, 0x07, 0x3c, 0x13, 0x9c, 0x28, 0x69, 0x38, 0x59, 0x25, 0x37, 0x17,
	0x29, 0x33, 0xf8, 0x22, 0x11, 0x3a, 0x4b, 0xde, 0xdf, 0x5e, 0x29, 0x86, 0x0d, 0x8b, 0xd7, 0x4a,
	0x1a, 0x09, 0x9f, 0xb4, 0xac, 0xb8, 0x61, 0xc5, 0x42, 0x67, 0x27, 0x8f, 0x33, 0x99, 0x49, 0xc7,
	0x48, 0x6c, 0x56, 0x93, 0x4f, 0x42, 0x22, 0xb5, 0x90, 0x3a, 0x49, 0xb1, 0x66, 0xad, 0x28, 0x91,
	0x3c, 0xaf, 0xeb, 0xb3, 0x1f, 0x3e, 0x38, 0xdc, 0xe9, 0xbf, 0x2b, 0xa4, 0x61, 0x70, 0x06, 0x46,
	0x02, 0xab, 0x15, 0x33, 0x81, 0x77, 0xe6, 0xcd, 0xf7, 0x97, 0xa0, 0x2a, 0xa3, 0x06, 0x41, 0xcd,
	0x0a, 0xe7, 0x60, 0x42, 0x0b, 0x85, 0x0d, 0x97, 0x79, 0xe0, 0x3b, 0xd6, 0x41, 0x55, 0x46, 0x2d,
	0x86, 0xda, 0x0c, 0x7e, 0x00, 0x93, 0xb5, 0x92, 0x37, 0x9c, 0x32, 0x15, 0xec, 0x9d, 0x79, 0xf3,
	0x83, 0xe5, 0x2b, 0xcb, 0xdc, 0x61, 0x7f, 0xca, 0xe8, 0x3c, 0xe3, 0xe6, 0x53, 0x91, 0xc6, 0x44,
	0x8a, 0xa4, 0xb9, 0x6c, 0xbd, 0x9c, 0x6b, 0xba, 0x4a, 0xcc, 0xd7, 0x35, 0xd3, 0xf1, 0x82, 0x90,
	0x05, 0xa5, 0x8a, 0x69, 0x8d, 0xda, 0x56, 0xf8, 0x1c, 0x8c, 0x53, 0x4c, 0x56, 0x3c, 0xcf, 0x82,
	0xa1, 0xbb, 0xc3, 0xb4, 0x2a, 0xa3, 0x1d, 0x84, 0x76, 0x09, 0x3c, 0x05, 0x43, 0xbd, 0x96, 0x26,
	0x78, 0xe0, 0x38, 0x93, 0xaa, 0x8c, 0xdc, 0x1e, 0xb9, 0x08, 0x8f, 0xc1, 0x1e, 0xd6, 0xab, 0x60,
	0xe4, 0x8a, 0xe3, 0xaa, 0x8c, 0xec, 0x16, 0xd9, 0x60, 0x4b, 0x29, 0xa7, 0xc1, 0xb8, 0x2b, 0xa5,
	0x9c, 0x22, 0x1b, 0x66, 0xbf, 0x7c, 0xf0, 0xb0, 0xe7, 0xd9, 0x35, 0x36, 0xd8, 0x9e, 0x63, 0xb8,
	0x60, 0xce, 0xb5, 0xbd, 0xfa, 0x1c, 0xbb, 0x47, 0x2e, 0xc2, 0xa7, 0xc0, 0xe7, 0xd4, 0x79, 0x75,
	0xb8, 0x1c, 0x55, 0x65, 0xe4, 0x73, 0x8a, 0x7c, 0x4e, 0xe1, 0x1b, 0xb0, 0x4f, 0x64, 0xae, 0x59,
	0xae, 0x0b, 0xed, 0x0c, 0x9a, 0x5e, 0x9e, 0xc6, 0xf5, 0xf7, 0xc7, 0x76, 0x66, 0xed, 0x88, 0xaf,
	0x19, 0xb9, 0x92, 0x3c, 0x5f, 0x3e, 0xba, 0x2b, 0xa3, 0x41, 0x55, 0x46, 0x5d, 0x1b, 0xea, 0x52,
	0xf8, 0x16, 0x00, 0x22, 0x85, 0xe0, 0x5a, 0xdb, 0xd1, 0x0c, 0xff, 0x43, 0x0f, 0x36, 0x7a, 0xbd,
	0x3e, 0xd4, 0xcb, 0xe1, 0x02, 0x8c, 0x14, 0xfb, 0x82, 0x15, 0x75, 0x06, 0x4e, 0x2f, 0x8f, 0xff,
	0xa9, 0xe6, 0xa4, 0x8e, 0x1a, 0xa9, 0xa6, 0x01, 0x35, 0x2b, 0x8c, 0x01, 0xc0, 0xf4, 0x73, 0xa1,
	0x8d, 0x60, 0xb9, 0x69, 0xac, 0x3e, 0xb2, 0x47, 0x76, 0x28, 0xea, 0xe5, 0xcb, 0xd7, 0x77, 0x9b,
	0xd0, 0xbb, 0xdf, 0x84, 0xde, 0xef, 0x4d, 0xe8, 0x7d, 0xdf, 0x86, 0x83, 0xfb, 0x6d, 0x38, 0xf8,
	0xb9, 0x0d, 0x07, 0x1f, 0x5f, 0xf4, 0xde, 0x4a, 0xf7, 0xaf, 0x08, 0xf3, 0x4d, 0xe6, 0x2c, 0xb9,
	0xed, 0x43, 0x3a, 0x4b, 0x47, 0xee, 0x85, 0xbf, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x74, 0xbe,
	0xef, 0x7b, 0x56, 0x03, 0x00, 0x00,
}

func (m *TxCreateQuote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxCreateQuote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxCreateQuote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bid) > 0 {
		i -= len(m.Bid)
		copy(dAtA[i:], m.Bid)
		i = encodeVarintTxCreate(dAtA, i, uint64(len(m.Bid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Ask) > 0 {
		i -= len(m.Ask)
		copy(dAtA[i:], m.Ask)
		i = encodeVarintTxCreate(dAtA, i, uint64(len(m.Ask)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Spot) > 0 {
		i -= len(m.Spot)
		copy(dAtA[i:], m.Spot)
		i = encodeVarintTxCreate(dAtA, i, uint64(len(m.Spot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Backing) > 0 {
		i -= len(m.Backing)
		copy(dAtA[i:], m.Backing)
		i = encodeVarintTxCreate(dAtA, i, uint64(len(m.Backing)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTxCreate(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTxCreate(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Market) > 0 {
		i -= len(m.Market)
		copy(dAtA[i:], m.Market)
		i = encodeVarintTxCreate(dAtA, i, uint64(len(m.Market)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateQuoteData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateQuoteData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateQuoteData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Adjustment) > 0 {
		i -= len(m.Adjustment)
		copy(dAtA[i:], m.Adjustment)
		i = encodeVarintTxCreate(dAtA, i, uint64(len(m.Adjustment)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxCreate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxCreate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Consensus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTxCreate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Id != 0 {
		i = encodeVarintTxCreate(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintTxCreate(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxCreate(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxCreate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxCreateQuote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Market)
	if l > 0 {
		n += 1 + l + sovTxCreate(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTxCreate(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTxCreate(uint64(l))
	}
	l = len(m.Backing)
	if l > 0 {
		n += 1 + l + sovTxCreate(uint64(l))
	}
	l = len(m.Spot)
	if l > 0 {
		n += 1 + l + sovTxCreate(uint64(l))
	}
	l = len(m.Ask)
	if l > 0 {
		n += 1 + l + sovTxCreate(uint64(l))
	}
	l = len(m.Bid)
	if l > 0 {
		n += 1 + l + sovTxCreate(uint64(l))
	}
	return n
}

func (m *CreateQuoteData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTxCreate(uint64(m.Time))
	}
	if m.Id != 0 {
		n += 1 + sovTxCreate(uint64(m.Id))
	}
	l = m.Consensus.Size()
	n += 1 + l + sovTxCreate(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovTxCreate(uint64(l))
	l = m.Reward.Size()
	n += 1 + l + sovTxCreate(uint64(l))
	l = len(m.Adjustment)
	if l > 0 {
		n += 1 + l + sovTxCreate(uint64(l))
	}
	return n
}

func sovTxCreate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxCreate(x uint64) (n int) {
	return sovTxCreate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxCreateQuote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxCreate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxCreateQuote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxCreateQuote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider[:0], dAtA[iNdEx:postIndex]...)
			if m.Provider == nil {
				m.Provider = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxCreate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxCreate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateQuoteData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxCreate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateQuoteData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateQuoteData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adjustment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxCreate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adjustment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxCreate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxCreate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxCreate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxCreate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxCreate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxCreate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxCreate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxCreate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxCreate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxCreate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxCreate = fmt.Errorf("proto: unexpected end of group")
)
