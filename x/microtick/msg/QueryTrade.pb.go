// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microtick/v1beta1/msg/QueryTrade.proto

package msg

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryTradeRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (m *QueryTradeRequest) Reset()         { *m = QueryTradeRequest{} }
func (m *QueryTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTradeRequest) ProtoMessage()    {}
func (*QueryTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9ae40c5558af4a, []int{0}
}
func (m *QueryTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeRequest.Merge(m, src)
}
func (m *QueryTradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeRequest proto.InternalMessageInfo

func (m *QueryTradeRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ResponseQuotedParams struct {
	Id            uint32        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Premium       types.DecCoin `protobuf:"bytes,2,opt,name=premium,proto3" json:"premium"`
	RemainBacking string        `protobuf:"bytes,3,opt,name=remain_backing,json=remainBacking,proto3" json:"remain_backing"`
	Spot          types.DecCoin `protobuf:"bytes,4,opt,name=spot,proto3" json:"spot"`
}

func (m *ResponseQuotedParams) Reset()         { *m = ResponseQuotedParams{} }
func (m *ResponseQuotedParams) String() string { return proto.CompactTextString(m) }
func (*ResponseQuotedParams) ProtoMessage()    {}
func (*ResponseQuotedParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9ae40c5558af4a, []int{1}
}
func (m *ResponseQuotedParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseQuotedParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseQuotedParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseQuotedParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseQuotedParams.Merge(m, src)
}
func (m *ResponseQuotedParams) XXX_Size() int {
	return m.Size()
}
func (m *ResponseQuotedParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseQuotedParams.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseQuotedParams proto.InternalMessageInfo

func (m *ResponseQuotedParams) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResponseQuotedParams) GetPremium() types.DecCoin {
	if m != nil {
		return m.Premium
	}
	return types.DecCoin{}
}

func (m *ResponseQuotedParams) GetRemainBacking() string {
	if m != nil {
		return m.RemainBacking
	}
	return ""
}

func (m *ResponseQuotedParams) GetSpot() types.DecCoin {
	if m != nil {
		return m.Spot
	}
	return types.DecCoin{}
}

type ResponseTradeLeg struct {
	LegId        uint32                                        `protobuf:"varint,1,opt,name=leg_id,json=legId,proto3" json:"leg_id"`
	Type         string                                        `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	Backing      types.DecCoin                                 `protobuf:"bytes,3,opt,name=backing,proto3" json:"backing"`
	Premium      types.DecCoin                                 `protobuf:"bytes,4,opt,name=premium,proto3" json:"premium"`
	Cost         types.DecCoin                                 `protobuf:"bytes,5,opt,name=cost,proto3" json:"cost"`
	Quantity     types.DecCoin                                 `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity"`
	Long         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=long,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"long"`
	Short        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,8,opt,name=short,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"short"`
	Quoted       ResponseQuotedParams                          `protobuf:"bytes,9,opt,name=quoted,proto3" json:"quoted"`
	CurrentValue string                                        `protobuf:"bytes,10,opt,name=current_value,json=currentValue,proto3" json:"current_value"`
}

func (m *ResponseTradeLeg) Reset()         { *m = ResponseTradeLeg{} }
func (m *ResponseTradeLeg) String() string { return proto.CompactTextString(m) }
func (*ResponseTradeLeg) ProtoMessage()    {}
func (*ResponseTradeLeg) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9ae40c5558af4a, []int{2}
}
func (m *ResponseTradeLeg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseTradeLeg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseTradeLeg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseTradeLeg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseTradeLeg.Merge(m, src)
}
func (m *ResponseTradeLeg) XXX_Size() int {
	return m.Size()
}
func (m *ResponseTradeLeg) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseTradeLeg.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseTradeLeg proto.InternalMessageInfo

func (m *ResponseTradeLeg) GetLegId() uint32 {
	if m != nil {
		return m.LegId
	}
	return 0
}

func (m *ResponseTradeLeg) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ResponseTradeLeg) GetBacking() types.DecCoin {
	if m != nil {
		return m.Backing
	}
	return types.DecCoin{}
}

func (m *ResponseTradeLeg) GetPremium() types.DecCoin {
	if m != nil {
		return m.Premium
	}
	return types.DecCoin{}
}

func (m *ResponseTradeLeg) GetCost() types.DecCoin {
	if m != nil {
		return m.Cost
	}
	return types.DecCoin{}
}

func (m *ResponseTradeLeg) GetQuantity() types.DecCoin {
	if m != nil {
		return m.Quantity
	}
	return types.DecCoin{}
}

func (m *ResponseTradeLeg) GetLong() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Long
	}
	return nil
}

func (m *ResponseTradeLeg) GetShort() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Short
	}
	return nil
}

func (m *ResponseTradeLeg) GetQuoted() ResponseQuotedParams {
	if m != nil {
		return m.Quoted
	}
	return ResponseQuotedParams{}
}

func (m *ResponseTradeLeg) GetCurrentValue() string {
	if m != nil {
		return m.CurrentValue
	}
	return ""
}

type QueryTradeResponse struct {
	Id              uint32                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Market          string                                        `protobuf:"bytes,2,opt,name=market,proto3" json:"market"`
	Duration        string                                        `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration"`
	Order           string                                        `protobuf:"bytes,4,opt,name=order,proto3" json:"order"`
	Taker           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=taker,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"taker"`
	Quantity        types.DecCoin                                 `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity"`
	Legs            []ResponseTradeLeg                            `protobuf:"bytes,7,rep,name=legs,proto3" json:"legs"`
	Start           int64                                         `protobuf:"varint,8,opt,name=start,proto3" json:"start"`
	Expiration      int64                                         `protobuf:"varint,9,opt,name=expiration,proto3" json:"expiration"`
	Strike          types.DecCoin                                 `protobuf:"bytes,10,opt,name=strike,proto3" json:"strike"`
	Commission      types.DecCoin                                 `protobuf:"bytes,11,opt,name=commission,proto3" json:"commission"`
	SettleIncentive types.DecCoin                                 `protobuf:"bytes,12,opt,name=settle_incentive,json=settleIncentive,proto3" json:"settle_incentive"`
	Consensus       types.DecCoin                                 `protobuf:"bytes,13,opt,name=consensus,proto3" json:"consensus"`
	CurrentValue    string                                        `protobuf:"bytes,14,opt,name=current_value,json=currentValue,proto3" json:"current_value"`
}

func (m *QueryTradeResponse) Reset()         { *m = QueryTradeResponse{} }
func (m *QueryTradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTradeResponse) ProtoMessage()    {}
func (*QueryTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9ae40c5558af4a, []int{3}
}
func (m *QueryTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeResponse.Merge(m, src)
}
func (m *QueryTradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeResponse proto.InternalMessageInfo

func (m *QueryTradeResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryTradeResponse) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *QueryTradeResponse) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *QueryTradeResponse) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *QueryTradeResponse) GetTaker() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Taker
	}
	return nil
}

func (m *QueryTradeResponse) GetQuantity() types.DecCoin {
	if m != nil {
		return m.Quantity
	}
	return types.DecCoin{}
}

func (m *QueryTradeResponse) GetLegs() []ResponseTradeLeg {
	if m != nil {
		return m.Legs
	}
	return nil
}

func (m *QueryTradeResponse) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *QueryTradeResponse) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *QueryTradeResponse) GetStrike() types.DecCoin {
	if m != nil {
		return m.Strike
	}
	return types.DecCoin{}
}

func (m *QueryTradeResponse) GetCommission() types.DecCoin {
	if m != nil {
		return m.Commission
	}
	return types.DecCoin{}
}

func (m *QueryTradeResponse) GetSettleIncentive() types.DecCoin {
	if m != nil {
		return m.SettleIncentive
	}
	return types.DecCoin{}
}

func (m *QueryTradeResponse) GetConsensus() types.DecCoin {
	if m != nil {
		return m.Consensus
	}
	return types.DecCoin{}
}

func (m *QueryTradeResponse) GetCurrentValue() string {
	if m != nil {
		return m.CurrentValue
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryTradeRequest)(nil), "microtick.v1beta1.msg.QueryTradeRequest")
	proto.RegisterType((*ResponseQuotedParams)(nil), "microtick.v1beta1.msg.ResponseQuotedParams")
	proto.RegisterType((*ResponseTradeLeg)(nil), "microtick.v1beta1.msg.ResponseTradeLeg")
	proto.RegisterType((*QueryTradeResponse)(nil), "microtick.v1beta1.msg.QueryTradeResponse")
}

func init() {
	proto.RegisterFile("microtick/v1beta1/msg/QueryTrade.proto", fileDescriptor_fe9ae40c5558af4a)
}

var fileDescriptor_fe9ae40c5558af4a = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0x8e, 0xd3, 0xc4, 0x4d, 0xa6, 0x49, 0xb6, 0x1d, 0x2d, 0xc8, 0x5a, 0xad, 0xe2, 0x90, 0x03,
	0x44, 0xaa, 0xd6, 0xd6, 0x2e, 0x12, 0xd2, 0x72, 0x58, 0x69, 0x4d, 0x11, 0x2a, 0xa2, 0x52, 0x3b,
	0x20, 0x0e, 0x5c, 0x22, 0xc7, 0x1e, 0xb9, 0xa3, 0xc4, 0x9e, 0x74, 0x66, 0x5c, 0xb5, 0xfc, 0x0a,
	0xfe, 0x01, 0x7f, 0xa7, 0xc7, 0xde, 0xe0, 0x64, 0xa1, 0xf6, 0x96, 0x23, 0x47, 0x4e, 0x68, 0x3e,
	0xec, 0x18, 0xda, 0xaa, 0x29, 0xec, 0x65, 0xde, 0x8f, 0x99, 0xe7, 0x99, 0x79, 0x1f, 0xbf, 0xaf,
	0x0c, 0x3e, 0x4d, 0x49, 0xc4, 0xa8, 0x20, 0xd1, 0xdc, 0x3f, 0x7f, 0x3d, 0xc3, 0x22, 0x7c, 0xed,
	0xa7, 0x3c, 0xf1, 0x4f, 0x72, 0xcc, 0x2e, 0x7f, 0x60, 0x61, 0x8c, 0xbd, 0x25, 0xa3, 0x82, 0xc2,
	0x8f, 0xaa, 0x73, 0x9e, 0x39, 0xe7, 0xa5, 0x3c, 0x79, 0xf1, 0x3c, 0xa1, 0x09, 0x55, 0x27, 0x7c,
	0xe9, 0xe9, 0xc3, 0x2f, 0x86, 0x11, 0xe5, 0x29, 0xe5, 0xfe, 0x2c, 0xe4, 0xb8, 0xa2, 0x8d, 0x28,
	0xc9, 0xf4, 0xfe, 0x78, 0x1f, 0xec, 0xad, 0x2f, 0x40, 0xf8, 0x2c, 0xc7, 0x5c, 0xc0, 0x8f, 0x41,
	0x93, 0xc4, 0x8e, 0x35, 0xb2, 0x26, 0xfd, 0xc0, 0x5e, 0x15, 0x6e, 0x93, 0xc4, 0xa8, 0x49, 0xe2,
	0xf1, 0x9f, 0x16, 0x78, 0x8e, 0x30, 0x5f, 0xd2, 0x8c, 0xe3, 0x93, 0x9c, 0x0a, 0x1c, 0x1f, 0x87,
	0x2c, 0x4c, 0xf9, 0x43, 0x00, 0xf8, 0x0d, 0xd8, 0x5e, 0x32, 0x9c, 0x92, 0x3c, 0x75, 0x9a, 0x23,
	0x6b, 0xb2, 0xf3, 0xe6, 0xa5, 0xa7, 0xdf, 0xe3, 0xc9, 0xf7, 0x54, 0xcf, 0x3f, 0xc0, 0xd1, 0x57,
	0x94, 0x64, 0xc1, 0xb3, 0xab, 0xc2, 0x6d, 0xac, 0x0a, 0xb7, 0x04, 0xa1, 0xd2, 0x81, 0x6f, 0xc1,
	0x80, 0xe1, 0x34, 0x24, 0xd9, 0x74, 0x16, 0x46, 0x73, 0x92, 0x25, 0xce, 0xd6, 0xc8, 0x9a, 0x74,
	0x03, 0xb8, 0x2a, 0xdc, 0x7f, 0xed, 0xa0, 0xbe, 0x8e, 0x03, 0x1d, 0xc2, 0x77, 0xa0, 0xc5, 0x97,
	0x54, 0x38, 0xad, 0x0d, 0x1e, 0xd0, 0x33, 0x0f, 0x50, 0x08, 0xa4, 0xd6, 0xf1, 0xaf, 0x6d, 0xb0,
	0x5b, 0x16, 0xad, 0x54, 0xfa, 0x0e, 0x27, 0xf0, 0x13, 0x60, 0x2f, 0x70, 0x32, 0xad, 0x8a, 0x06,
	0xab, 0xc2, 0x35, 0x19, 0xd4, 0x5e, 0xe0, 0xe4, 0x30, 0x86, 0x2f, 0x41, 0x4b, 0x5c, 0x2e, 0xb1,
	0x2a, 0xbc, 0x1b, 0x74, 0x24, 0xab, 0x8c, 0x91, 0x5a, 0xa5, 0x32, 0xf5, 0x4a, 0x36, 0x56, 0xa6,
	0x2c, 0xb2, 0x74, 0xea, 0x12, 0xb7, 0xfe, 0x97, 0xc4, 0xef, 0x40, 0x2b, 0xa2, 0x5c, 0x38, 0xed,
	0xa7, 0xe8, 0x24, 0x11, 0x48, 0xad, 0xf0, 0x5b, 0xd0, 0x39, 0xcb, 0xc3, 0x4c, 0x10, 0x71, 0xe9,
	0xd8, 0x1b, 0x70, 0xec, 0x1a, 0x8e, 0x0a, 0x85, 0x2a, 0x0f, 0x1e, 0x81, 0xd6, 0x82, 0x66, 0x89,
	0xb3, 0x3d, 0xb2, 0x26, 0xbd, 0xe0, 0xad, 0xbc, 0x49, 0xc6, 0x7f, 0x15, 0xee, 0xab, 0x84, 0x88,
	0xd3, 0x7c, 0xe6, 0x45, 0x34, 0xf5, 0x4d, 0x6b, 0x6b, 0xf3, 0x8a, 0xc7, 0x73, 0x5f, 0x4a, 0xcb,
	0xbd, 0xf7, 0x51, 0xf4, 0x3e, 0x8e, 0x19, 0xe6, 0x1c, 0x29, 0x18, 0x3c, 0x06, 0x6d, 0x7e, 0x4a,
	0x99, 0x70, 0x3a, 0x8a, 0xef, 0xcb, 0x55, 0xe1, 0xea, 0xc4, 0xd3, 0x09, 0x35, 0x0e, 0x7e, 0x0f,
	0xec, 0x33, 0x35, 0x00, 0x4e, 0x57, 0x95, 0xba, 0xef, 0xdd, 0x3b, 0x94, 0xde, 0x7d, 0xd3, 0x12,
	0x0c, 0x4c, 0xe5, 0x86, 0x02, 0x19, 0x0b, 0xbf, 0x00, 0xfd, 0x28, 0x67, 0x0c, 0x67, 0x62, 0x7a,
	0x1e, 0x2e, 0x72, 0xec, 0x00, 0xd5, 0x3a, 0x7b, 0xab, 0xc2, 0xfd, 0xe7, 0x06, 0xea, 0x99, 0xf0,
	0x47, 0x19, 0x8d, 0x7f, 0xb3, 0x01, 0xac, 0x0f, 0xb1, 0xbe, 0xf2, 0xc1, 0xa1, 0x1c, 0x03, 0x3b,
	0x0d, 0xd9, 0x1c, 0x0b, 0xd3, 0x9a, 0xaa, 0x77, 0x75, 0x06, 0x19, 0x0b, 0x27, 0xa0, 0x13, 0xe7,
	0x2c, 0x14, 0x84, 0x66, 0x66, 0xd2, 0x7a, 0xf2, 0x53, 0x95, 0x39, 0x54, 0x79, 0xd0, 0x05, 0x6d,
	0xca, 0x62, 0xcc, 0x54, 0xf7, 0x75, 0x83, 0xae, 0xd4, 0x56, 0x25, 0x90, 0x36, 0x52, 0x7c, 0x11,
	0xce, 0x31, 0x53, 0x8d, 0x65, 0xc4, 0x57, 0x89, 0xff, 0x20, 0xbe, 0xc2, 0x7d, 0xd0, 0x4e, 0x3b,
	0x04, 0xad, 0x05, 0x4e, 0xb8, 0xb3, 0x3d, 0xda, 0x9a, 0xec, 0xbc, 0xf9, 0xec, 0x91, 0xcf, 0x58,
	0xce, 0xff, 0x7a, 0x00, 0x24, 0x18, 0xa9, 0x55, 0x2a, 0xc1, 0x45, 0x68, 0xba, 0x6c, 0x4b, 0x2b,
	0xa1, 0x12, 0x48, 0x1b, 0xe8, 0x01, 0x80, 0x2f, 0x96, 0xc4, 0xc8, 0xda, 0x55, 0xa7, 0x06, 0xab,
	0xc2, 0xad, 0x65, 0x51, 0xcd, 0x87, 0x07, 0xc0, 0xe6, 0x82, 0x91, 0xb9, 0x6e, 0x84, 0xc7, 0xaa,
	0xac, 0xba, 0x4a, 0x63, 0x90, 0xb1, 0xf0, 0x18, 0x80, 0x88, 0xa6, 0x29, 0xe1, 0x5c, 0xde, 0xba,
	0xb3, 0x01, 0x13, 0x34, 0x4c, 0x35, 0x1c, 0xaa, 0xf9, 0x30, 0x04, 0xbb, 0x1c, 0x0b, 0xb1, 0xc0,
	0x53, 0x92, 0x45, 0x38, 0x13, 0xe4, 0x1c, 0x3b, 0xbd, 0x0d, 0x78, 0x1d, 0xc3, 0x7b, 0x07, 0x8d,
	0x9e, 0xe9, 0xcc, 0x61, 0x99, 0x80, 0x47, 0xa0, 0x1b, 0x49, 0xc1, 0x33, 0x9e, 0x73, 0xa7, 0xbf,
	0x01, 0xf7, 0x9e, 0xe1, 0x5e, 0xc3, 0xd0, 0xda, 0xbd, 0x3b, 0x59, 0x83, 0x8d, 0x26, 0x2b, 0xf8,
	0xfa, 0xea, 0x66, 0x68, 0x5d, 0xdf, 0x0c, 0xad, 0x3f, 0x6e, 0x86, 0xd6, 0x2f, 0xb7, 0xc3, 0xc6,
	0xf5, 0xed, 0xb0, 0xf1, 0xfb, 0xed, 0xb0, 0xf1, 0xd3, 0x7e, 0xad, 0x73, 0xd7, 0xff, 0xed, 0x54,
	0xfc, 0x4c, 0x33, 0xec, 0x5f, 0xd4, 0x53, 0x3c, 0x99, 0xd9, 0xea, 0x5f, 0xfb, 0xf9, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xfa, 0x7d, 0x67, 0x82, 0xe2, 0x07, 0x00, 0x00,
}

func (m *QueryTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQueryTrade(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseQuotedParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseQuotedParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseQuotedParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RemainBacking) > 0 {
		i -= len(m.RemainBacking)
		copy(dAtA[i:], m.RemainBacking)
		i = encodeVarintQueryTrade(dAtA, i, uint64(len(m.RemainBacking)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Premium.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintQueryTrade(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseTradeLeg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseTradeLeg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseTradeLeg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentValue) > 0 {
		i -= len(m.CurrentValue)
		copy(dAtA[i:], m.CurrentValue)
		i = encodeVarintQueryTrade(dAtA, i, uint64(len(m.CurrentValue)))
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.Quoted.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Short) > 0 {
		i -= len(m.Short)
		copy(dAtA[i:], m.Short)
		i = encodeVarintQueryTrade(dAtA, i, uint64(len(m.Short)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Long) > 0 {
		i -= len(m.Long)
		copy(dAtA[i:], m.Long)
		i = encodeVarintQueryTrade(dAtA, i, uint64(len(m.Long)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Quantity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Cost.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Premium.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Backing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintQueryTrade(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.LegId != 0 {
		i = encodeVarintQueryTrade(dAtA, i, uint64(m.LegId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentValue) > 0 {
		i -= len(m.CurrentValue)
		copy(dAtA[i:], m.CurrentValue)
		i = encodeVarintQueryTrade(dAtA, i, uint64(len(m.CurrentValue)))
		i--
		dAtA[i] = 0x72
	}
	{
		size, err := m.Consensus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.SettleIncentive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.Strike.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.Expiration != 0 {
		i = encodeVarintQueryTrade(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x48
	}
	if m.Start != 0 {
		i = encodeVarintQueryTrade(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Legs) > 0 {
		for iNdEx := len(m.Legs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Legs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.Quantity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryTrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Taker) > 0 {
		i -= len(m.Taker)
		copy(dAtA[i:], m.Taker)
		i = encodeVarintQueryTrade(dAtA, i, uint64(len(m.Taker)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintQueryTrade(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintQueryTrade(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Market) > 0 {
		i -= len(m.Market)
		copy(dAtA[i:], m.Market)
		i = encodeVarintQueryTrade(dAtA, i, uint64(len(m.Market)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQueryTrade(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryTrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryTrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQueryTrade(uint64(m.Id))
	}
	return n
}

func (m *ResponseQuotedParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQueryTrade(uint64(m.Id))
	}
	l = m.Premium.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	l = len(m.RemainBacking)
	if l > 0 {
		n += 1 + l + sovQueryTrade(uint64(l))
	}
	l = m.Spot.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	return n
}

func (m *ResponseTradeLeg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LegId != 0 {
		n += 1 + sovQueryTrade(uint64(m.LegId))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovQueryTrade(uint64(l))
	}
	l = m.Backing.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	l = m.Premium.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	l = m.Cost.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	l = len(m.Long)
	if l > 0 {
		n += 1 + l + sovQueryTrade(uint64(l))
	}
	l = len(m.Short)
	if l > 0 {
		n += 1 + l + sovQueryTrade(uint64(l))
	}
	l = m.Quoted.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	l = len(m.CurrentValue)
	if l > 0 {
		n += 1 + l + sovQueryTrade(uint64(l))
	}
	return n
}

func (m *QueryTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQueryTrade(uint64(m.Id))
	}
	l = len(m.Market)
	if l > 0 {
		n += 1 + l + sovQueryTrade(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovQueryTrade(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovQueryTrade(uint64(l))
	}
	l = len(m.Taker)
	if l > 0 {
		n += 1 + l + sovQueryTrade(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	if len(m.Legs) > 0 {
		for _, e := range m.Legs {
			l = e.Size()
			n += 1 + l + sovQueryTrade(uint64(l))
		}
	}
	if m.Start != 0 {
		n += 1 + sovQueryTrade(uint64(m.Start))
	}
	if m.Expiration != 0 {
		n += 1 + sovQueryTrade(uint64(m.Expiration))
	}
	l = m.Strike.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	l = m.SettleIncentive.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	l = m.Consensus.Size()
	n += 1 + l + sovQueryTrade(uint64(l))
	l = len(m.CurrentValue)
	if l > 0 {
		n += 1 + l + sovQueryTrade(uint64(l))
	}
	return n
}

func sovQueryTrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryTrade(x uint64) (n int) {
	return sovQueryTrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseQuotedParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseQuotedParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseQuotedParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premium", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Premium.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainBacking", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainBacking = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseTradeLeg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseTradeLeg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseTradeLeg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegId", wireType)
			}
			m.LegId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LegId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Backing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premium", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Premium.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Long", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Long = append(m.Long[:0], dAtA[iNdEx:postIndex]...)
			if m.Long == nil {
				m.Long = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Short", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Short = append(m.Short[:0], dAtA[iNdEx:postIndex]...)
			if m.Short == nil {
				m.Short = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quoted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quoted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taker = append(m.Taker[:0], dAtA[iNdEx:postIndex]...)
			if m.Taker == nil {
				m.Taker = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Legs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Legs = append(m.Legs, ResponseTradeLeg{})
			if err := m.Legs[len(m.Legs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strike", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Strike.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleIncentive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettleIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryTrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryTrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryTrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryTrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryTrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryTrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryTrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryTrade = fmt.Errorf("proto: unexpected end of group")
)
