#!/bin/bash
# two-chainz creates two gaiad chains and configures the relayer to 

CHAIN_DATA="$(pwd)/data"
RELAYER_CONF="$HOME/.relayer"

# Ensure gaiad is installed
if ! [ -x "$(which gaiad)" ]; then
  echo "Error: gaiad is not installed. Try running 'make build-gaia'" >&2
  exit 1
fi

# Display software version for testers
GAIA_VERSION=`gaiad version`
echo "GAIA VERSION INFO: $GAIA_VERSION"
MTM_VERSION=`mtm version`
echo "MICROTICK VERSION INFO: $MTM_VERSION"

# Ensure jq is installed
if [[ ! -x "$(which jq)" ]]; then
  echo "jq (a tool for parsing json in the command line) is required..."
  echo "https://stedolan.github.io/jq/download/"
  exit 1
fi

# Ensure user understands what will be deleted
if [[ -d $CHAIN_DATA ]] && [[ ! "$1" == "skip" ]]; then
  read -p "$(basename $0) will delete \$(pwd)/data and \$HOME/.relayer folders. Do you wish to continue? (y/n): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
  fi
fi

# Delete data from old runs
rm -rf $CHAIN_DATA &> /dev/null
rm -rf $RELAYER_CONF &> /dev/null

# Stop existing gaiad processes
killall gaiad &> /dev/null
killall mtm &> /dev/null

set -e

chainid0=gaiad
chainid1=microtick

echo "Generating gaia configurations..."
mkdir -p $CHAIN_DATA && cd $CHAIN_DATA && cd ../
./one-chain gaiad $chainid0 ./data 26557 26556 6061 9091 100000000000stake 1000000000udai
./one-chain mtm $chainid1 ./data 26657 26656 6060 9090 100000000000stake

echo "Generating rly configurations..."
rly config init
rly config add-dir ./config

SEED0=$(jq -r '.mnemonic' $CHAIN_DATA/$chainid0/key_seed.json)
SEED1=$(jq -r '.mnemonic' $CHAIN_DATA/$chainid1/key_seed.json)
echo "Key $(rly keys restore $chainid0 testkey "$SEED0") imported from $chainid0 to relayer..."
echo "Key $(rly keys restore $chainid1 testkey "$SEED1") imported from $chainid1 to relayer..."
echo "Creating light clients..."
sleep 3
rly light init $chainid0 -f
rly light init $chainid1 -f
